<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Carson Farmer</title><link href="http://cfarmer.github.io/blog/" rel="alternate"></link><link href="http://cfarmer.github.io/blog/feeds/networks.atom.xml" rel="self"></link><id>http://cfarmer.github.io/blog/</id><updated>2010-04-17T14:26:00-04:00</updated><entry><title>Bootstrapping network partitioning methods</title><link href="http://cfarmer.github.io/blog/2010/04/bootstrapping-network-partitioning-methods/" rel="alternate"></link><updated>2010-04-17T14:26:00-04:00</updated><author><name>cfarmer</name></author><id>tag:cfarmer.github.io/blog,2010-04-17:2010/04/bootstrapping-network-partitioning-methods/</id><summary type="html">&lt;p&gt;My PhD research at the moment focuses on network-based algorithms for
delineating functional regions (geographical regions within which a
large majority of the local population seeks employment, and the
majority of local employers recruit their labour). Currently I&amp;#8217;m using a
network partitioning algorithm based on &lt;a href="http://en.wikipedia.org/wiki/Modularity_(networks)"&gt;modularity maximisation&lt;/a&gt;. I
have found my results to be quite good so far, but, &amp;#8216;quite good&amp;#8217; isn&amp;#8217;t
really a very scientific description of validity, so obviously some
others means of validation is required. Enter bootstrap resampling!
&lt;/p&gt;
&lt;p&gt;Bootstrapping can be used to assess the &lt;strong&gt;validity&lt;/strong&gt; of a
particular network partitioning by measuring the &lt;strong&gt;stability&lt;/strong&gt; of the
detected partitions (or clusters). Here, a cluster may be thought of as
stable if, for example, it remains relatively invariant to random- or
sampling-error and noise. In this sense, we&amp;#8217;re interested in
distinguishing between clusters which reﬂect the true nature of the
dataset, and those generated as a result of random effects, data
uncertainties, or measurement&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;The process works like&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate a large number of random &amp;#8216;bootstrap samples&amp;#8217; from a
   (directed) weighted&amp;nbsp;network,&lt;/li&gt;
&lt;li&gt;Apply some network partitioning algorithm to the original&amp;nbsp;network,&lt;/li&gt;
&lt;li&gt;(Re)apply the network partitioning algorithm to each bootstrap&amp;nbsp;sample,&lt;/li&gt;
&lt;li&gt;For each cluster in the original network partitioning, the most
   similar cluster in each bootstrap replicate is found using the
   &lt;a href="http://en.wikipedia.org/wiki/Jaccard_index"&gt;Jaccard coeffcient&lt;/a&gt; &lt;code&gt;γ&lt;/code&gt; as a measure of similarity, and
   similarity is&amp;nbsp;recorded,&lt;/li&gt;
&lt;li&gt;The stability of each cluster is assessed based on the mean Jaccard
   similarity over all resampled&amp;nbsp;datasets.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the above process is run, we get an estimate of how stable each
cluster is. We can then use this information to decide which clusters to
keep, and which ones need to be merged with their closest neighbour.
There are several ways to specify how we resample the data. If we assume
no specific structure in the dataset, regular non-parametric bootstrap
resampling will work fine, however, alternative resampling strategies
include: a) replacing network edge weights with noise, b) adding a small
amount of noise to (a percentage of) the network edges, or c) using only
a subset of the original network (i.e., generating a subgraph of the
original&amp;nbsp;network).&lt;/p&gt;
&lt;p&gt;I tested this process on a computer generated network with three
predefined clusters using resampling strategy (&lt;em&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;) above, by adding
random noise to &lt;em&gt;&lt;code&gt;k&lt;/code&gt;&lt;/em&gt; percent of the network edges, and observed the
effect of increasing levels of uncertainty by applying the resampling
technique to increasing values of &lt;em&gt;&lt;code&gt;k&lt;/code&gt;&lt;/em&gt;. The results show just what we
would expect: as more noise is added to the dataset, the stability of
the detected clusters goes down. The nice bit however, is that for
&lt;em&gt;&lt;code&gt;k &amp;lt;= 0.5&lt;/code&gt;&lt;/em&gt;, the detected clusters remained relatively stable
(&lt;em&gt;&lt;code&gt;γ &amp;gt;= 0.6&lt;/code&gt;&lt;/em&gt;), meaning the network partitioning algorithm I was using
is doing a pretty good job.&amp;nbsp;Nice!&lt;/p&gt;
&lt;p&gt;This bootstrapping process is part of a paper I&amp;#8217;m working on at the
moment, and uses a geographical variant of &lt;a href="community-structure-in-directed-weighted-networks.html"&gt;this algorithm&lt;/a&gt; to detect
functional regions in travel to work data. I&amp;#8217;ll post more on the
algorithm and my bootstrapping implementation in R (using the very cool
&lt;a href="http://cran.r-project.org/web/packages/foreach/index.html"&gt;foreach&lt;/a&gt; package) here&amp;nbsp;soon.&lt;/p&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Leicht, E. A., &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Newman, &lt;span class="caps"&gt;M. E. J.&lt;/span&gt;(2008). &lt;a href="http://prl.aps.org/abstract/PRL/v100/i11/e118703"&gt;Community structure in
directed networks&lt;/a&gt;. &lt;em&gt;Physical Review Letters&lt;/em&gt;, 100(11),&amp;nbsp;118703.&lt;/p&gt;
&lt;p&gt;Hennig, C. (2007). &lt;a href="http://www.sciencedirect.com/science/article/B6V8V-4MJJMV8-1/2/303f8dd772cd73d54aea3a224b188005"&gt;Cluster-wise assessment of cluster stability&lt;/a&gt;.
&lt;em&gt;Computational Statistics &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Data Analysis&lt;/em&gt;, 52(1),&amp;nbsp;258-271.&lt;/p&gt;</summary><category term="Bootstrapping"></category><category term="Networks"></category><category term="R"></category><category term="Stability"></category><category term="Uncertainty"></category><category term="Validity"></category><category term="How-to"></category></entry><entry><title>Community structure in directed, weighted networks</title><link href="http://cfarmer.github.io/blog/2009/10/community-structure-in-directed-weighted-networks/" rel="alternate"></link><updated>2009-10-20T16:24:00-04:00</updated><author><name>cfarmer</name></author><id>tag:cfarmer.github.io/blog,2009-10-20:2009/10/community-structure-in-directed-weighted-networks/</id><summary type="html">&lt;p&gt;Many natural and human systems can be represented as networks, including
the Internet, social interactions, food webs, and transportation and
communication flows. One thing that these types of networks have in
common, is that they can each be represented as a series of vertices (or
nodes) and edges (or links). This &lt;a href="http://toreopsahl.com/2008/11/28/network-weighted-network/"&gt;blog entry&lt;/a&gt; presents a nice
description of networks, highlighting the differences between various
network types (directed, undirected, weighted, unweighted, etc.).
&lt;/p&gt;
&lt;p&gt;According to &lt;a href="http://arxiv.org/abs/0709.4500"&gt;this paper&lt;/a&gt;, many
networks are found to display &amp;#8220;community structure&amp;#8221;, which basically
refers to groupings of vertices where &lt;em&gt;within&lt;/em&gt;-group edge connections
are more dense than &lt;em&gt;between&lt;/em&gt;-group edge connections. In order to detect
and delineate these groupings, &lt;a href="http://arxiv.org/abs/0709.4500"&gt;Leicht &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Newman (2008)&lt;/a&gt; present a nice &amp;#8220;modularity&amp;#8221; optimisation algorithm which is
designed to find a &amp;#8220;good&amp;#8221; division of a network by&amp;nbsp;maximising&lt;/p&gt;
&lt;p&gt;$$Q =&amp;nbsp;\frac{1}{2m}s^TB_s,$$&lt;/p&gt;
&lt;p&gt;where $s$ is a vector whose elements define which group each node
belongs to, and $\mathbf{B}$ is the so-called modularity matrix, with&amp;nbsp;elements&lt;/p&gt;
&lt;p&gt;$$B_{ij} = A_{ij} - \frac{k_{i}^{in}&amp;nbsp;k_{j}^{out}}{m},$$&lt;/p&gt;
&lt;p&gt;where $A_{ij}$ is an element in the adjacency matrix $\mathbf{A}$, $k_{i}^{in}$
and $k_{j}^{out}$ are the in- and out-degrees of the vertices, and $m$ is
the total sum of edges in the network. In practice, this can be extended
to directed networks by considering the matrix $\mathbf{B} + \mathbf{B}^T$ (for an
explanation of why this is the case, see &lt;a href="http://arxiv.org/abs/0709.4500"&gt;Leicht &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Newman&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It is relatively straight-forward to extend the above modularity
optimisation algorithm to the case of a weighted network by computing
the modularity matrix using the in- and out-&lt;em&gt;strength&lt;/em&gt;(see link to blog
post above) of the vertices instead of the degree. This is similar to
the concept presented in &lt;a href="http://arxiv.org/abs/cond-mat/0407503"&gt;Newman (2004)&lt;/a&gt;, and indeed the
theory of the modularity algorithm holds for this more general case
(note that an unweighted network can simply be represented as a weighted
network where the edge weights are all set to 1). As such, our new
modularity matrix can be computed&amp;nbsp;as&lt;/p&gt;
&lt;p&gt;$$B_{ij} = A_{ij} - \frac{s_{i}^{in}&amp;nbsp;s_{j}^{out}}{m},$$&lt;/p&gt;
&lt;p&gt;where $m = \sum_{i}s_{i}^{in} = \sum_{j} s_j^{out}$, and $s$ represents the vertex
strength. As such, using the above &lt;em&gt;new&lt;/em&gt; definition of $\mathbf{B}$, the
modularity of a directed, weighted network is computed&amp;nbsp;as&lt;/p&gt;
&lt;p&gt;$$Q =&amp;nbsp;\frac{1}{4m}s^{T}(\mathbf{B}-\mathbf{B}^{T})s.$$&lt;/p&gt;
&lt;p&gt;My current research uses a modified modularity optimisation algorithm to
compute &lt;a href="http://en.wikipedia.org/wiki/Functional_region"&gt;functional regions&lt;/a&gt; for Ireland based on a range of
socio-economic variables. The goal is to provide a consistent framework
for computing functional regions which are comparable across different
countries and/or&amp;nbsp;regions.&lt;/p&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Leicht, &lt;span class="caps"&gt;E. A.&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Newman, &lt;span class="caps"&gt;M. E. J.&lt;/span&gt;(2008). &lt;a href="http://arxiv.org/abs/0709.4500"&gt;Community structure in directed networks&lt;/a&gt;.
&lt;em&gt;Physical Review Letters&lt;/em&gt;, 100(11),&amp;nbsp;118703.&lt;/p&gt;
&lt;p&gt;Newman, &lt;span class="caps"&gt;M. E. J.&lt;/span&gt;(2004). &lt;a href="http://arxiv.org/abs/cond-mat/0407503"&gt;Analysis of weighted networks&lt;/a&gt;. &lt;em&gt;Physical Review E&lt;/em&gt;, 70(5),&amp;nbsp;056131.&lt;/p&gt;</summary><category term="Community structure"></category><category term="Directed"></category><category term="Modularity"></category><category term="Networks"></category><category term="Weighted"></category><category term="Helpful tips"></category><category term="Research"></category></entry></feed>