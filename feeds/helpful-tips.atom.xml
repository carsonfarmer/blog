<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Carson Farmer</title><link href="http://www.carsonfarmer.com/" rel="alternate"></link><link href="http://www.carsonfarmer.com/feeds/helpful-tips.atom.xml" rel="self"></link><id>http://www.carsonfarmer.com/</id><updated>2013-12-17T14:56:00-05:00</updated><entry><title>A quick bookmarklet for off-campus library access</title><link href="http://www.carsonfarmer.com/2013/12/bookmarklet_for_off_campus_library_access/" rel="alternate"></link><updated>2013-12-17T14:56:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2013-12-17:2013/12/bookmarklet_for_off_campus_library_access/</id><summary type="html">&lt;p&gt;I have been doing a fair bit of research off-campus lately, and as usual, have been having trouble accessing research materials (mainly academic publications) from home. &lt;em&gt;Fortunately&lt;/em&gt;, Hunter College provides &lt;a href="http://library.hunter.cuny.edu/find/accessfromhome"&gt;off-campus access&lt;/a&gt; to all electronic resources available to Hunter students, faculty and staff via their Library proxy server. &lt;em&gt;Unfortunately&lt;/em&gt;, it turns out to be a huge pain to use anything other than the library search facilities (like &lt;a href="http://scholar.google.com/"&gt;Google Scholar&lt;/a&gt;) through the proxy server*. In fact, when working off-campus, you actually have to preface each &lt;span class="caps"&gt;URL&lt;/span&gt; address to licensed resources with 
&lt;code&gt;http://proxy.wexler.hunter.cuny.edu/login?url=&lt;/code&gt; in order to be able to access it. Not very&amp;nbsp;handy&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Bookmarklet"&gt;Bookmarklets&lt;/a&gt; to the rescue! This problem is actually something that bookmarklets are perfect for. A bookmarklet is (usually) just a small piece of JavaScript that resides in your browser and provides additional functionality to a web page. With that in mind, I decided to create a simple bookmarklet to automatically reload a given page with the above prefix prepended to the &lt;span class="caps"&gt;URL&lt;/span&gt;; giving me access to the material via the library proxy server, while still being able to use whatever search tools I want. In this case, all the bookmarklet contains is the following JavaScript&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://proxy.wexler.hunter.cuny.edu/login?url=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that the whole link is&amp;nbsp;simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript: location.href=&amp;#39;http://proxy.wexler.hunter.cuny.edu/login?url=&amp;#39;+location.href&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Library Proxy&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;Installing&amp;#8217; a bookmarklet is as simple as dragging it onto your browser&amp;#8217;s bookmarks toolbar (I think on some versions of Internet Explorer, you might have to right-click and select &amp;#8220;Add to Favorites&amp;#8230;&amp;#8221;). If you drag this &lt;a href="javascript:location.href='http://proxy.wexler.hunter.cuny.edu/login?url='+location.href"&gt;Library Proxy&lt;/a&gt; link onto your bookmarks bar, you&amp;#8217;ll have a handy little tool to automatically access the current page via the Hunter College library proxy (note that you&amp;#8217;ll need Hunter College credentials for this to work), instantly increasing your productivity by 12.45%&amp;#8230; or&amp;nbsp;so.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*&lt;/em&gt; I might just be missing something, in which case, hopefully someone will correct&amp;nbsp;me.&lt;/p&gt;</summary><category term="Helpful tips"></category><category term="HTML"></category><category term="Research"></category><category term="How to"></category></entry><entry><title>Essential Python Geospatial Libraries</title><link href="http://www.carsonfarmer.com/2013/07/essential-python-geo-libraries/" rel="alternate"></link><updated>2013-07-12T17:25:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2013-07-12:2013/07/essential-python-geo-libraries/</id><summary type="html">&lt;p&gt;Just so I don&amp;#8217;t forget, here is a list of really awesome Python libraries that
I&amp;#8217;m using these days to do lots of fun things with spatial data [&lt;span class="caps"&gt;UPDATE&lt;/span&gt;: I&amp;#8217;ve 
added a few&amp;nbsp;more]:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; - For data handling and&amp;nbsp;munging&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/Shapely"&gt;shapely&lt;/a&gt; - For geometry&amp;nbsp;handling&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scitools.org.uk/cartopy/"&gt;cartopy&lt;/a&gt; - For plotting spatial&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;&lt;a href="http://toblerity.github.io/rtree/"&gt;rtree&lt;/a&gt; - For efficiently querying spatial&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cityinabottle.org/nodebox/"&gt;nodebox-opengl&lt;/a&gt; - For playing around with&amp;nbsp;animations&lt;/li&gt;
&lt;li&gt;&lt;a href="http://statsmodels.sourceforge.net/"&gt;statsmodels&lt;/a&gt; - For models and stats in Python (otherwise I&amp;#8217;d use&amp;nbsp;R)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.numpy.org/"&gt;numpy&lt;/a&gt; - For pretty much anything that involves&amp;nbsp;arrays&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/geopy/"&gt;geopy&lt;/a&gt; - For geolocating and things like&amp;nbsp;that&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt; - For a wondering interactive environment in which to&amp;nbsp;play&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/freetype-py/"&gt;freetype-py&lt;/a&gt; - For converting font glyphs to polygons (odd I&amp;nbsp;know&amp;#8230;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/GDAL/"&gt;ogr/gdal&lt;/a&gt; - For reading, writing, and transforming geospatial data&amp;nbsp;formats&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.qgis.org/pyqgis-cookbook/"&gt;pyqgis&lt;/a&gt; - For anything and everything &lt;span class="caps"&gt;GIS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://toblerity.github.io/fiona/"&gt;fiona&lt;/a&gt; - For making it &lt;em&gt;easy&lt;/em&gt; to read/write geospatial data&amp;nbsp;formats&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt; - For all my plotting&amp;nbsp;needs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://networkx.github.io/"&gt;networkx&lt;/a&gt; - For working with networks&amp;nbsp;(duh!)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.2/"&gt;pelican&lt;/a&gt; - For blogging about all this&amp;nbsp;stuff&amp;#8230;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/PySAL/"&gt;pysal&lt;/a&gt; - For all your spatial econometrics needs (and&amp;nbsp;more)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/descartes"&gt;descartes&lt;/a&gt; - For plotting geometries in&amp;nbsp;matplotlib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on Twitter and some of the comments below, I should also&amp;nbsp;add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://geographiclib.sourceforge.net/"&gt;geographiclib&lt;/a&gt; - For solving geodesic&amp;nbsp;problems&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/pyshp/"&gt;pyshp&lt;/a&gt; - For reading and writing shapefiles (in &lt;em&gt;pure&lt;/em&gt;&amp;nbsp;Python)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/pyproj/"&gt;pyproj&lt;/a&gt; - For conversions between&amp;nbsp;projections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any others I&amp;#8217;ve&amp;nbsp;missed?&lt;/p&gt;
</summary><category term="Update"></category><category term="Helpful tips"></category><category term="Python"></category><category term="GIS"></category><category term="Open Source"></category></entry><entry><title>manageR and rpy2 installation problems</title><link href="http://www.carsonfarmer.com/2012/10/manager-and-rpy2-installation-problems/" rel="alternate"></link><updated>2012-10-06T14:26:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2012-10-06:2012/10/manager-and-rpy2-installation-problems/</id><summary type="html">&lt;p&gt;Unfortunately, I haven&amp;#8217;t had much time recently to update or work on
&lt;code&gt;manageR&lt;/code&gt;, but I&amp;#8217;m hoping that will change in the next few months&amp;#8230;
Having said that, there are quite a few people out there that have been
having trouble installing &lt;code&gt;manageR&lt;/code&gt; (and the required &lt;code&gt;rpy2&lt;/code&gt;) on their
system to get things working at all! I have had some individuals provide
possible fixes and suggestions on how to get things working properly on
various platforms, and I&amp;#8217;m going to use this post to amalgamate them,
and hopefully create a one stop post for all your &lt;code&gt;rpy2&lt;/code&gt; and &lt;code&gt;manageR&lt;/code&gt;
needs. I&amp;#8217;m also hoping that people will post potential fixes in the
comments to help others with more specific problems?

For now, I have the following potential fix for &lt;code&gt;OSX&lt;/code&gt; (Lion 10.7.2 at&amp;nbsp;least):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;R&lt;/code&gt; to latest version (&lt;a href="http://www.r-project.org/"&gt;binary from r-project.org&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Reinstall &lt;code&gt;QGIS&lt;/code&gt; (&lt;a href="http://www.kyngchaos.com/software/qgis"&gt;Kyngchaos installer&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Reinstall &lt;code&gt;GDAL_complete&lt;/code&gt; (&lt;a href="http://www.kyngchaos.com/software/frameworks"&gt;Kyngchaos again&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Reinstall &lt;code&gt;rpy2&lt;/code&gt; (latter via &lt;a href="http://rpy.sourceforge.net/rpy2_download.html"&gt;pip&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reboot&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Apparently the (potential) problem is actually related to previous &lt;code&gt;R&lt;/code&gt;
builds, where symlinks were referring to the wrong location. This
potential fix is courtesy of &lt;a href="http://gis.stackexchange.com/questions/17169/is-it-possible-to-run-an-r-script-on-a-layer-in-qgis" title="Run an R Script on layer in QGIS"&gt;this Stackexchange&amp;nbsp;thread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok, so does anyone else have some suggestions to get things working on
Windows? Perhaps someone out there has a Windows build they&amp;#8217;d like to
share? As far as I know (i.e., it works for me), things are working fine
on Linux, but if someone else has a different experience, please share
in the&amp;nbsp;comments.&lt;/p&gt;</summary><category term="manageR"></category><category term="Python"></category><category term="QGIS"></category><category term="R spatial"></category><category term="rpy2"></category><category term="Spatial"></category><category term="Free open-source software (FOSS)"></category></entry><entry><title>Cross-browser iframe scaling</title><link href="http://www.carsonfarmer.com/2012/08/cross-browser-iframe-scaling/" rel="alternate"></link><updated>2012-08-06T18:18:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2012-08-06:2012/08/cross-browser-iframe-scaling/</id><summary type="html">&lt;p&gt;This is just a quick post to document an annoyance (and solution) that
I&amp;#8217;ve recently discovered when trying to scale a webpage embedded in
another page using an &lt;code&gt;iframe&lt;/code&gt;. When trying to come up with a nice way
to embed &lt;a href="examples/olympic_countries/"&gt;this page&lt;/a&gt; inside &lt;a href="http://www.st-andrews.ac.uk/geoinformatics/"&gt;this page&lt;/a&gt;, I found that webkit based
browsers were not behaving as they should. After a lot of fiddling
about, I discovered that the following &lt;code&gt;css&lt;/code&gt; seems to fix the&amp;nbsp;issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#wrap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;630px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#frame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#frame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1230px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;530px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if instead of &lt;code&gt;-ms-zoom&lt;/code&gt; you use &lt;code&gt;zoom&lt;/code&gt;, webkit browsers seem
to &amp;#8216;double scale&amp;#8217; everything, which turned out to be the root of my
problem. With the above tweaks, everything works fine (for now) using
the following &lt;code&gt;HTML&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;frame&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.website.com/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully this post will save someone (or me in the future) some
frustration and time. The above fix was cobbled together based on
suggestions from &lt;a href="http://stackoverflow.com/questions/166160/how-can-i-scale-the-content-of-an-iframe"&gt;here&lt;/a&gt; (see answers from &lt;code&gt;Kip&lt;/code&gt;, &lt;code&gt;lxs&lt;/code&gt;, and &lt;code&gt;r3cgm&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Carson&lt;/p&gt;</summary><category term="CSS"></category><category term="HTML"></category><category term="iframe"></category><category term="scaling"></category></entry><entry><title>Because its fun to map stuff…</title><link href="http://www.carsonfarmer.com/2012/03/because-its-fun-to-map-stuff/" rel="alternate"></link><updated>2012-03-30T17:46:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2012-03-30:2012/03/because-its-fun-to-map-stuff/</id><summary type="html">&lt;p&gt;Its been quite a while since my last post, and its Friday and I was
feeling creative, so I decided to map something! I&amp;#8217;ve been looking for
an excuse to produce a nice graphic like the one &lt;a href="http://underdark.wordpress.com/about/"&gt;Anita Graser&lt;/a&gt;
created to represent Vienna’s green-spaces. She used &lt;a href="http://qgis.org/"&gt;Quantum
&lt;span class="caps"&gt;GIS&lt;/span&gt;&lt;/a&gt; to produce a &lt;a href="http://underdark.wordpress.com/2012/03/04/mapping-density-with-hexagonal-grids/"&gt;hexagonal grid&lt;/a&gt; for representing the density of
Viennese trees instead of the standard heat map or kernel density map,
and the results are quite nice! I&amp;#8217;m a huge fan of &lt;span class="caps"&gt;QGIS&lt;/span&gt;, but I tend to do
most of my work in R, so I decided to see if I could produce something
similar using R. Turns out you can, and the final results are displayed
below (read on to see the full work-flow). Instead of trees, I went
ahead and mapped the locations of unique visitors to
&lt;code&gt;http://www.carsonfarmer.com/&lt;/code&gt; between 2009 and&amp;nbsp;2011:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.carsonfarmer.com/images/website_visitors.svg"&gt;&lt;img alt="Visitors map" src="http://www.carsonfarmer.com/images/website_visitors.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Work-flow&lt;/h3&gt;
&lt;p&gt;Firstly, I downloaded the logs for &lt;code&gt;www.carsonfarmer.com&lt;/code&gt;. I did this
directly from the console, though I&amp;#8217;m pretty sure I could have done this
from R as well. Next, I needed to extract the unique &lt;span class="caps"&gt;IP&lt;/span&gt; addresses from
the logs. I found this nice grep one-liner from &lt;a href="http://blogs.law.harvard.edu/djcp/2009/04/how-to-extract-uniq-ips-from-apache-via-grep-cut-and-uniq/"&gt;here&lt;/a&gt;, which I
modified to grab all unique &lt;span class="caps"&gt;IP&lt;/span&gt; addresses that &amp;#8216;&lt;span class="caps"&gt;GET&lt;/span&gt;&amp;#8217; something from the&amp;nbsp;site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;grep &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; access.log | cut -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f1 | sort | uniq &amp;gt; ip_addresses.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To actually map the &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, I obviously needed some way to convert
the raw &lt;span class="caps"&gt;IP&lt;/span&gt; addresses to latitude and longitude coordinates. Enter the
very nice &lt;a href="http://www.datasciencetoolkit.org/"&gt;Data Science Toolkit (&lt;span class="caps"&gt;DSTK&lt;/span&gt;)&lt;/a&gt; from Pete Warden and the very
handy &lt;a href="https://github.com/rtelmore/RDSTK"&gt;&lt;span class="caps"&gt;RDSTK&lt;/span&gt; R package&lt;/a&gt; from Ryan Elmore! Basically, the &lt;span class="caps"&gt;DSTK&lt;/span&gt; has an
&lt;span class="caps"&gt;API&lt;/span&gt; that can be queried for all sorts of information useful for &amp;#8216;data
science&amp;#8217; applications, and the &lt;span class="caps"&gt;RDSTK&lt;/span&gt; makes it possible to query to &lt;span class="caps"&gt;API&lt;/span&gt;
directly from within R. I first heard about both these projects from the
&lt;a href="http://blog.revolutionanalytics.com"&gt;Revolution Analytics blog&lt;/a&gt;, where there is an &lt;a href="http://blog.revolutionanalytics.com/2011/05/mapping-locations-in-r-with-the-data-science-toolkit.html"&gt;article&lt;/a&gt; summarising
Ryan Elmore&amp;#8217;s &lt;a href="http://thelogcabin.wordpress.com/2011/05/02/r-and-the-data-science-toolkit/"&gt;work on &lt;span class="caps"&gt;RDSTK&lt;/span&gt;&lt;/a&gt;, and a few other handy links. &lt;span class="caps"&gt;RDSTK&lt;/span&gt;
isn&amp;#8217;t (yet?) available on &lt;a href="http://cran.r-project.org/"&gt;&lt;span class="caps"&gt;CRAN&lt;/span&gt;&lt;/a&gt;, so I downloaded it directly from&amp;nbsp;github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget https://github.com/rtelmore/RDSTK/raw/master/src/RDSTK_1.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I installed it via &lt;code&gt;R CMD INSTALL&lt;/code&gt; (note that it requires other R
packages: &lt;code&gt;RCurl&lt;/code&gt;, &lt;code&gt;rjson&lt;/code&gt;, and &lt;code&gt;plyr&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;R CMD INSTALL RDSTK_1.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once I had all that stuff installed and ready to go, I actually started
up an R session and got&amp;nbsp;working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;addresses &lt;span class="o"&gt;=&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ip_addresses.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col.names&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;RDSTK&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt; ip2coordinates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ip2coordinates&lt;/code&gt; function requires multiple IPs to be contained
within a single string with comma-separated &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, but we can
only do a few IPs at a time (about 100 I think?) so I had to do this
part in a loop (it probably isn&amp;#8217;t polite to slam &lt;span class="caps"&gt;DSTK&lt;/span&gt; with 1,000s of
requests, so be&amp;nbsp;nice!).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ips &lt;span class="o"&gt;=&lt;/span&gt; paste&lt;span class="p"&gt;(&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;addresses&lt;span class="o"&gt;$&lt;/span&gt;address&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; collapse&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
out &lt;span class="o"&gt;=&lt;/span&gt; ip2coordinates&lt;span class="p"&gt;(&lt;/span&gt;ips&lt;span class="p"&gt;)&lt;/span&gt;
last &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
s &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="p"&gt;(&lt;/span&gt;addresses&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; nrow&lt;span class="p"&gt;(&lt;/span&gt;addresses&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; s&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    ips &lt;span class="o"&gt;=&lt;/span&gt; paste&lt;span class="p"&gt;(&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;addresses&lt;span class="o"&gt;$&lt;/span&gt;address&lt;span class="p"&gt;[(&lt;/span&gt;last&lt;span class="m"&gt;+1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;i&lt;span class="p"&gt;]),&lt;/span&gt; collapse&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    out &lt;span class="o"&gt;=&lt;/span&gt; rbind&lt;span class="p"&gt;(&lt;/span&gt;out&lt;span class="p"&gt;,&lt;/span&gt; ip2coordinates&lt;span class="p"&gt;(&lt;/span&gt;ips&lt;span class="p"&gt;))&lt;/span&gt;
    last &lt;span class="o"&gt;=&lt;/span&gt; i
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that is done running, the next step(s) are to a) convert the
returned &lt;code&gt;data.frame&lt;/code&gt; to a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt;, b) create a
&lt;code&gt;SpatialGrid&lt;/code&gt; based on the points, c) create a &lt;code&gt;SpatialPolygons&lt;/code&gt; object
from a hexagonal sample of the grid, and then finally d) create a
&lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt; for&amp;nbsp;plotting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;sp&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# make the output into a Spatial* object&lt;/span&gt;
coordinates&lt;span class="p"&gt;(&lt;/span&gt;out&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;longitude&lt;span class="o"&gt;+&lt;/span&gt;latitude
library&lt;span class="p"&gt;(&lt;/span&gt;maptools&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# need this for the following function&lt;/span&gt;
sg &lt;span class="o"&gt;=&lt;/span&gt; Sobj_SpatialGrid&lt;span class="p"&gt;(&lt;/span&gt;out&lt;span class="p"&gt;,&lt;/span&gt; maxDim&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;SG
hex_pts &lt;span class="o"&gt;=&lt;/span&gt; spsample&lt;span class="p"&gt;(&lt;/span&gt;sg&lt;span class="p"&gt;,&lt;/span&gt; type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hexagonal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; cellsize&lt;span class="o"&gt;=&lt;/span&gt;sg&lt;span class="o"&gt;@&lt;/span&gt;grid&lt;span class="o"&gt;@&lt;/span&gt;cellsize&lt;span class="p"&gt;)&lt;/span&gt;
hex_poly &lt;span class="o"&gt;=&lt;/span&gt; HexPoints2SpatialPolygons&lt;span class="p"&gt;(&lt;/span&gt;hex_pts&lt;span class="p"&gt;)&lt;/span&gt;
pts_poly &lt;span class="o"&gt;=&lt;/span&gt; over&lt;span class="p"&gt;(&lt;/span&gt;hex_poly&lt;span class="p"&gt;,&lt;/span&gt; out&lt;span class="p"&gt;,&lt;/span&gt; returnList&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
pts_poly_count &lt;span class="o"&gt;=&lt;/span&gt; sapply&lt;span class="p"&gt;(&lt;/span&gt;pts_poly&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; nrow&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))&lt;/span&gt;
poly &lt;span class="o"&gt;=&lt;/span&gt; SpatialPolygonsDataFrame&lt;span class="p"&gt;(&lt;/span&gt;poly&lt;span class="p"&gt;,&lt;/span&gt; data.frame&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts_poly_count&lt;span class="p"&gt;),&lt;/span&gt; 
    match.ID&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, now for some&amp;nbsp;plotting!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# pick some reasonable break points&lt;/span&gt;
breaks &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2000.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# use RColorBrewer to get a nice blue palette&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;RColorBrewer&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# don&amp;#39;t use the lightest colour, it looks washed out&lt;/span&gt;
cols &lt;span class="o"&gt;=&lt;/span&gt; brewer.pal&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Blues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="c1"&gt;# plot the grid, which produces something close to our final product&lt;/span&gt;
spplot&lt;span class="p"&gt;(&lt;/span&gt;poly&lt;span class="p"&gt;[&lt;/span&gt;poly&lt;span class="o"&gt;$&lt;/span&gt;count&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col.regions&lt;span class="o"&gt;=&lt;/span&gt;cols&lt;span class="p"&gt;,&lt;/span&gt; at&lt;span class="o"&gt;=&lt;/span&gt;breaks&lt;span class="p"&gt;,&lt;/span&gt; 
       par.settings&lt;span class="o"&gt;=&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;axis.line&lt;span class="o"&gt;=&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;transparent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then used &lt;a href="http://inkscape.org/"&gt;Inkscape&lt;/a&gt; to tweak the final product, adding titles and
labels and modifying the colour key to look like something a bit more
suited to the map at hand. In the end I had a nice map of my blog
readers, and an excellent way to procrastinate on a sunny Friday&amp;nbsp;afternoon!&lt;/p&gt;</summary><category term="Data Science Toolkit"></category><category term="Hexagonal Grid"></category><category term="IP Addreses"></category><category term="Mapping"></category><category term="R spatial"></category><category term="Free open-source software (FOSS)"></category><category term="How to"></category></entry><entry><title>Adding direct editing of geometry fields in QGIS</title><link href="http://www.carsonfarmer.com/2011/03/adding-direct-editing-of-geometry-fields-in-qgis/" rel="alternate"></link><updated>2011-03-12T18:43:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2011-03-12:2011/03/adding-direct-editing-of-geometry-fields-in-qgis/</id><summary type="html">&lt;p&gt;Being able to add/remove attributes isn&amp;#8217;t actually a very new feature
for &lt;span class="caps"&gt;QGIS&lt;/span&gt; at this point. However, to date non of the fTools functions
(Vector menu) have taken advantage of this capability. If a tool needed
to create a new field in the input vector layer, it simply wrote a new
version of the vector layer to disk with the additional fields added.
There have been several requests to allow some tools to add/update
attributes directly on the input layers, so I went ahead and created a
script to test this functionality out. I&amp;#8217;ve 
&lt;a href="|filname|/uploads/add_geometry_information.py"&gt;provided a copy here&lt;/a&gt; 
for anyone who would like to test it out before I add it to &lt;span class="caps"&gt;QGIS&lt;/span&gt;
permanently. Basically, the script will replace/update three of the
Vector menu tools, including &lt;code&gt;Analysis \&amp;gt; Sum line lengths&lt;/code&gt;, &lt;code&gt;Analysis
\&amp;gt; Points in polygon&lt;/code&gt;, and &lt;code&gt;Geometry tools \&amp;gt; Add/Export geometry
info&lt;/code&gt;.

Here are some examples of the script&amp;#8217;s usage from the &lt;span class="caps"&gt;QGIS&lt;/span&gt; Python&amp;nbsp;console:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add geometry information (assumes that the target layer in first
layer in the&amp;nbsp;layer-list):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qgis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapCanvas&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;add_geometry_information&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add_geometry_information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addGeometryInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vlayer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Count the number of points or length of lines in each polygon of an
input polygon layer (assumes polygon layer is second, and point or line
layer is the first in&amp;nbsp;layer-list):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;polygonLayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="n"&gt;Layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add_geometry_information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countFeaturesInPolygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygonLayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputLayer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that to import the module properly (and easily), make sure it is
somewhere that PyQGIS can find it, such as &lt;code&gt;\~/.qgis/python&lt;/code&gt;. If the layer
is in editing mode, then udpates can be undone, otherwise, updates are
written automatically to the provider. The &lt;code&gt;countFeaturesInPolygon()&lt;/code&gt;
function automatically recognizes if an input layer is a point or line
layer, and computes the correct information accordingly (outputting a
count for points, and line lengths for lines). For both functions, the
last argument can be a boolean specifying whether to update selected
features only (&lt;code&gt;default=False&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;C&lt;/p&gt;</summary><category term="Geographic information science/systems (GIS)"></category><category term="Geometry"></category><category term="PyQGIS"></category><category term="Python"></category><category term="QGIS"></category><category term="Free open-source software (FOSS)"></category></entry><entry><title>pgRouting, OpenStreetMap, and QGIS</title><link href="http://www.carsonfarmer.com/2010/10/pgrouting-openstreetmap-and-qgis/" rel="alternate"></link><updated>2010-10-14T12:26:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2010-10-14:2010/10/pgrouting-openstreetmap-and-qgis/</id><summary type="html">&lt;p&gt;I mentioned &lt;a href="http://www.carsonfarmer.com/2010/05/osm-data-by-country/"&gt;a few posts back&lt;/a&gt; that there was a great resource for
downloading OpenStreetMap data, and that it was relatively easy to
import osm data into &lt;code&gt;PostgreSQL&lt;/code&gt;/&lt;code&gt;PostGIS&lt;/code&gt; for use with &lt;code&gt;pgRouting&lt;/code&gt; to
calculate shortest paths and various other network-based operations. In
this post, I&amp;#8217;ll outline the steps required to get all this up and going,
and provide a quick example to show how this can be combined with &lt;span class="caps"&gt;QGIS&lt;/span&gt;
to visualise the computed shortest path directly.
&lt;/p&gt;
&lt;p&gt;Firstly, we need to install all the required packages. I&amp;#8217;m assuming you
already have &lt;code&gt;PostgreSQL&lt;/code&gt; and &lt;code&gt;PostGIS&lt;/code&gt; installed, but if not, have a &lt;a href="http://www.carsonfarmer.com/2008/11/quick-guide-to-setting-up-postgis-database/"&gt;look
here&lt;/a&gt; for a quick guide to getting things set up (Note that the latest
version of &lt;code&gt;PostgreSQL&lt;/code&gt; is now&amp;nbsp;8.4).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install postgresql-server-dev-8.4 libboost-graph-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you don&amp;#8217;t have them already, you might also need tools for building
the required software packages, as well as subversion and&amp;nbsp;cmake.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install build-essential subversion cmake
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To be able to run the driving distance algorithms we need &lt;span class="caps"&gt;CGAL&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libcgal*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the traveling sales person algorithm requires &lt;span class="caps"&gt;GAUL&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://downloads.sourceforge.net/gaul/gaul-devel-0.1850-0.tar.gz
tar -xzf gaul-devel-0.1850-0.tar.gz &lt;span class="nb"&gt;cd &lt;/span&gt;gaul-devel-0.1850-0/
./configure --disable-slang
make
sudo make install
sudo ldconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it&amp;#8217;s time to download, build, and install &lt;code&gt;pgRouting&lt;/code&gt;. If you don&amp;#8217;t
have subversion, or you don&amp;#8217;t want to have the latest trunk version of
&lt;code&gt;pgRouting&lt;/code&gt;, you can also &lt;a href="http://pgrouting.postlbs.org/wiki/pgRoutingDownload"&gt;download it manually&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;svn checkout http://pgrouting.postlbs.org/svn/pgrouting/trunk pgrouting
&lt;span class="nb"&gt;cd &lt;/span&gt;pgrouting/
cmake -DWITH_TSP&lt;span class="o"&gt;=&lt;/span&gt;ON -DWITH_DD&lt;span class="o"&gt;=&lt;/span&gt;ON . make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we&amp;#8217;ve got that installed and ready to go, we need to set up
&lt;code&gt;PostgreSQL&lt;/code&gt; so that it &amp;#8216;trusts&amp;#8217; local database&amp;nbsp;connections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gedit /etc/postgresql/8.4/main/pg_hba.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Scroll to the bottom, and make sure you change the &lt;code&gt;METHOD&lt;/code&gt; to&amp;nbsp;&amp;#8216;trust&amp;#8217;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt;   &lt;span class="n"&gt;all&lt;/span&gt;         &lt;span class="n"&gt;all&lt;/span&gt;                               &lt;span class="n"&gt;trust&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now that we&amp;#8217;ve made these changes, we need to restart &lt;code&gt;PostgreSQL&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/postgresql-8.4 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we simply create a routing database to store our data&amp;nbsp;in&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createdb -U postgres routing createlang -U postgres plpgsql routing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;add the &lt;code&gt;PostGIS&lt;/code&gt; functions&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -U postgres -f /usr/share/postgresql/8.4/contrib/postgis-1.5/postgis.sql routing
psql -U postgres -f /usr/share/postgresql/8.4/contrib/postgis-1.5/spatial_ref_sys.sql routing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;add all the &lt;code&gt;pgRouting&lt;/code&gt; functions&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -U postgres -f /usr/share/postlbs/routing_core.sql routing
psql -U postgres -f /usr/share/postlbs/routing_core_wrappers.sql routing
psql -U postgres -f /usr/share/postlbs/routing_topology.sql routing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;including the traveling salesman&amp;nbsp;functions&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -U postgres -f /usr/share/postlbs/routing_tsp.sql routing
psql -U postgres -f /usr/share/postlbs/routing_tsp_wrappers.sql routing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;and finally the driving distance&amp;nbsp;functions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -U postgres -f /usr/share/postlbs/routing_dd.sql routing
psql -U postgres -f /usr/share/postlbs/routing_dd_wrappers.sql routing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now have a fully working &lt;code&gt;pgRouting&lt;/code&gt; database ready to be populated
with data! So in order to do that relatively painlessly, we first
install the &lt;a href="http://pgrouting.postlbs.org/wiki/tools/osm2pgrouting"&gt;osm2pgrouting&lt;/a&gt; tool, which will help us import our osm
data directly into our &lt;code&gt;pgRouting&lt;/code&gt; database with the correct structure and&amp;nbsp;everything.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;svn checkout http://pgrouting.postlbs.org/svn/pgrouting/tools/osm2pgrouting/trunk osm2pgrouting
&lt;span class="nb"&gt;cd &lt;/span&gt;osm2pgrouting/
make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that&amp;#8217;s finished building, we can go ahead and download our osm data
from &lt;a href="http://download.geofabrik.de/osm/"&gt;http://download.geofabrik.de/osm/&lt;/a&gt;. See this &lt;a href="http://www.carsonfarmer.com/2010/05/osm-data-by-country/"&gt;previous post&lt;/a&gt;
for details. For this example, I&amp;#8217;ll be using the osm data for&amp;nbsp;Ireland&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://download.geofabrik.de/osm/europe/ireland.osm.bz2
bzip2 -d ireland.osm.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we have that downloaded and extracted, we&amp;#8217;re ready to import the
osm data into our database using the &lt;code&gt;osm2pgrouting&lt;/code&gt; tool&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./osm2pgrouting -file /home/cfarmer/Downloads/ireland.osm -conf mapconfig.xml -dbname routing -user postgres -clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that is finished (could take a long time) we&amp;#8217;re ready to query the
network (Note that the values 52343 and 39219 represent network node&amp;nbsp;ids)&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;psql -U postgres routing
&lt;span class="k"&gt;select&lt;/span&gt; * from shortest_path
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select gid as id,&lt;/span&gt;
&lt;span class="s1"&gt;        source::int4,&lt;/span&gt;
&lt;span class="s1"&gt;        target::int4,&lt;/span&gt;
&lt;span class="s1"&gt;        length::double precision as cost&lt;/span&gt;
&lt;span class="s1"&gt;        from ways&amp;#39;&lt;/span&gt;,
    52343, 39219, &lt;span class="nb"&gt;false&lt;/span&gt;, &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;to produce something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vertex_id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;edge_id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="n"&gt;cost&lt;/span&gt;
&lt;span class="o"&gt;----------+---------+---------------------&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;52343&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;78055&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.217641978736602&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;52341&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;78052&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mf"&gt;0.0230665826613562&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;52342&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;78053&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mf"&gt;0.0839311516838216&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;20390&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;28717&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.166809293071158&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;20389&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;28716&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.493120178133836&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;20388&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;28715&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.271165901884914&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;20387&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;112841&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.101669458767093&lt;/span&gt;
&lt;span class="err"&gt;   &lt;/span&gt; &lt;span class="mi"&gt;14183&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;22893&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mf"&gt;0.106433172954507&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming your database is structured as &lt;code&gt;pgRouting&lt;/code&gt; expects (which it
should be if you&amp;#8217;ve used &lt;code&gt;osm2pgrouting&lt;/code&gt;), you can use the some of the
functions which return geometries for use with other &lt;code&gt;PostGIS&lt;/code&gt; functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; * from dijkstra_sp&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ways&amp;#39;&lt;/span&gt;, 52343, 39219&lt;span class="o"&gt;)&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;id&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;gid&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="n"&gt;the_geom&lt;/span&gt;
&lt;span class="o"&gt;----+--------+----------------------------&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;78055&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;78052&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;78053&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;28717&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;28716&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;28715&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;112841&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;22893&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;0105000020E610000001000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These queries are all fine and dandy, and can easily be used to
calculate the distances of shortest paths etc, but what I really want to
do is visualise this output in a &lt;span class="caps"&gt;GIS&lt;/span&gt; so I can get an idea of what these
shortest paths looks like. In &lt;em&gt;another&lt;/em&gt; &lt;a href="http://www.carsonfarmer.com/2010/04/postgis-select-statement-as-vector-layer-in-qgis/"&gt;previous post&lt;/a&gt;, I mentioned
how we could visualise spatial &lt;code&gt;SQL&lt;/code&gt; queries directly in &lt;span class="caps"&gt;QGIS&lt;/span&gt; from both
the Python console, and using a handy plugin. We can do the same thing
here using &lt;code&gt;pgRouting&lt;/code&gt; to produce a lovely spatial representation of our
shortest path&amp;nbsp;query:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.carsonfarmer.com/images/shortest_path.png"&gt;&lt;img alt="image" src="http://www.carsonfarmer.com/images/shortest_path-300x213.png" title="shortest_path" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And there you go, a full fledged routing library built right into our&amp;nbsp;database!&lt;/p&gt;</summary><category term="Networks"></category><category term="OpenStreeMap"></category><category term="pgRouting"></category><category term="PostgreSQL/PostGIS"></category><category term="QGIS"></category><category term="Free open-source software (FOSS)"></category><category term="Geographic information science/systems (GIS)"></category><category term="How to"></category><category term="Networks"></category></entry><entry><title>OSM data by country</title><link href="http://www.carsonfarmer.com/2010/05/osm-data-by-country/" rel="alternate"></link><updated>2010-05-13T12:05:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2010-05-13:2010/05/osm-data-by-country/</id><summary type="html">&lt;p&gt;For part of a traffic simulation project I am currently working on we
need country-wide road network data for Ireland. In the past, getting
decent road network data for an area this large was quite a task (not to
mention expensive and time consuming), however, with OpenStreetMap we
have access to this type of data instantly, and for free! In order to
download full country coverage all at once, all I had to do was turn to
this &lt;a href="http://download.geofabrik.de/osm/"&gt;extremely useful site&lt;/a&gt;, which provides links for daily excerpts
of OpenStreetMap data for any country in Europe plus several non-country
regions such as the Alps region, as well as select countries outside of
Europe. It currently also features &lt;a href="http://labs.geofabrik.de/haiti/"&gt;special coverage of Haiti&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that I have the &lt;span class="caps"&gt;OSM&lt;/span&gt; data downloaded, it should be relatively easy to
import it into my PostGIS database using &lt;a href="http://pgrouting.postlbs.org/"&gt;pgRouting&lt;/a&gt; and the
&lt;a href="http://pgrouting.postlbs.org/wiki/tools/osm2pgrouting"&gt;osm2pgrouting&lt;/a&gt; import tool. More to come on this topic once I get
things working&amp;nbsp;nicely&amp;#8230;&lt;/p&gt;</summary><category term="Ireland"></category><category term="OpenStreetMap"></category><category term="PostGIS"></category><category term="Road Networks"></category><category term="Helpful tips"></category><category term="Networks"></category><category term="Research"></category></entry><entry><title>PostGIS ‘select’ statement as vector layer in QGIS</title><link href="http://www.carsonfarmer.com/2010/04/postgis-select-statement-as-vector-layer-in-qgis/" rel="alternate"></link><updated>2010-04-27T17:40:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2010-04-27:2010/04/postgis-select-statement-as-vector-layer-in-qgis/</id><summary type="html">&lt;p&gt;Several colleagues of mine have asked whether it is possible to
visualise the results of a &lt;code&gt;SELECT&lt;/code&gt; statement on a &lt;a href="http://postgis.refractions.net/"&gt;PostGIS&lt;/a&gt; database
that returns spatial data in &lt;a href="http://www.qgis.org/"&gt;&lt;span class="caps"&gt;QGIS&lt;/span&gt;&lt;/a&gt;. In other words, can we map the
results of something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT id, st_union&lt;span class="o"&gt;(&lt;/span&gt;the_geom&lt;span class="o"&gt;)&lt;/span&gt; FROM spatial_table GROUP BY id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My usual answer to this in the past has been &amp;#8220;not yet&amp;#8230;&amp;#8221;, but now thanks
to Giuseppe Sucameli and Jürgen E. Fischer, the answer is a resounding
&amp;#8220;yes!&amp;#8221;. A &lt;a href="https://trac.osgeo.org/qgis/changeset/13340"&gt;recent patch&lt;/a&gt; to &lt;span class="caps"&gt;QGIS&lt;/span&gt; trunk now makes custom Postgres
queries possible via the postgres data provider.
&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;Unfortunately there is no user interface implemented to take advantage
of this functionality (yet!)&lt;/strike&gt;There is now a plugin available from the
&lt;a href="http://www.faunalia.it/qgis/plugins.xml"&gt;Faunalia python plugin repository&lt;/a&gt; called &lt;code&gt;RT Sql Layer&lt;/code&gt; which provides
a &lt;span class="caps"&gt;GUI&lt;/span&gt; for loading &lt;code&gt;PostGIS&lt;/code&gt; &lt;code&gt;SELECT&lt;/code&gt; statements as layer, but you can also
access this handy feature via the &lt;code&gt;QGIS&lt;/code&gt; &lt;code&gt;Python&lt;/code&gt; console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;db_conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dbname=&amp;#39;gis&amp;#39; host=localhost port=5432 user=&amp;#39;cfarmer&amp;#39; password=&amp;#39;xxxx&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;id_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(select id, st_union(the_geom) from spatial_table group by id)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; key=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; table=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; (the_geom) sql=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;id_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsVectorLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testlayer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we can then add the layer to the map canvas&amp;nbsp;via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;QgsMapLayerRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMapLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and even query/measure it via something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;feat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsFeature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;QgsRectangle&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QgsDistanceArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just another one of the many new features being added to &lt;span class="caps"&gt;QGIS&lt;/span&gt; every&amp;nbsp;day!&lt;/p&gt;</summary><category term="PostGIS"></category><category term="QGIS"></category><category term="Query"></category><category term="Vector"></category><category term="Free open-source software (FOSS)"></category><category term="Geographic information science/systems (GIS)"></category><category term="How to"></category></entry><entry><title>Voronoi polygons with R</title><link href="http://www.carsonfarmer.com/2009/09/voronoi-polygons-with-r/" rel="alternate"></link><updated>2009-09-16T22:30:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-09-16:2009/09/voronoi-polygons-with-r/</id><summary type="html">&lt;p&gt;To create a nice bounded Voronoi polygons tessellation of a point layer
in &lt;code&gt;R&lt;/code&gt;, we need two libraries: &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;deldir&lt;/code&gt;. The following function
takes a &lt;code&gt;SpatialPointsDataFrame&lt;/code&gt; as input, and returns a
&lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt; that represents the Voronoi tessellation of
the input point layer.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;voronoipolygons &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;layer&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    require&lt;span class="p"&gt;(&lt;/span&gt;deldir&lt;span class="p"&gt;)&lt;/span&gt;
    crds &lt;span class="o"&gt;=&lt;/span&gt; layer&lt;span class="o"&gt;@&lt;/span&gt;coords
    z &lt;span class="o"&gt;=&lt;/span&gt; deldir&lt;span class="p"&gt;(&lt;/span&gt;crds&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; crds&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    w &lt;span class="o"&gt;=&lt;/span&gt; tile.list&lt;span class="p"&gt;(&lt;/span&gt;z&lt;span class="p"&gt;)&lt;/span&gt;
    polys &lt;span class="o"&gt;=&lt;/span&gt; vector&lt;span class="p"&gt;(&lt;/span&gt;mode&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; length&lt;span class="o"&gt;=&lt;/span&gt;length&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;))&lt;/span&gt;
    require&lt;span class="p"&gt;(&lt;/span&gt;sp&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;along&lt;span class="o"&gt;=&lt;/span&gt;polys&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        pcrds &lt;span class="o"&gt;=&lt;/span&gt; cbind&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;[[&lt;/span&gt;i&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; w&lt;span class="p"&gt;[[&lt;/span&gt;i&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;y&lt;span class="p"&gt;)&lt;/span&gt;
        pcrds &lt;span class="o"&gt;=&lt;/span&gt; rbind&lt;span class="p"&gt;(&lt;/span&gt;pcrds&lt;span class="p"&gt;,&lt;/span&gt; pcrds&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,])&lt;/span&gt;
        polys&lt;span class="p"&gt;[[&lt;/span&gt;i&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Polygons&lt;span class="p"&gt;(&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;Polygon&lt;span class="p"&gt;(&lt;/span&gt;pcrds&lt;span class="p"&gt;)),&lt;/span&gt; ID&lt;span class="o"&gt;=&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    SP &lt;span class="o"&gt;=&lt;/span&gt; SpatialPolygons&lt;span class="p"&gt;(&lt;/span&gt;polys&lt;span class="p"&gt;)&lt;/span&gt;
    voronoi &lt;span class="o"&gt;=&lt;/span&gt; SpatialPolygonsDataFrame&lt;span class="p"&gt;(&lt;/span&gt;SP&lt;span class="p"&gt;,&lt;/span&gt; data&lt;span class="o"&gt;=&lt;/span&gt;data.frame&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;=&lt;/span&gt;crds&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        y&lt;span class="o"&gt;=&lt;/span&gt;crds&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; row.names&lt;span class="o"&gt;=&lt;/span&gt;sapply&lt;span class="p"&gt;(&lt;/span&gt;slot&lt;span class="p"&gt;(&lt;/span&gt;SP&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;polygons&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; slot&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To save the output to shapefile, simply use&lt;code&gt;writeOGR&lt;/code&gt; from the &lt;code&gt;rgdal&lt;/code&gt;
library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;rgdal&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;writeOGR
&lt;/pre&gt;&lt;/div&gt;</summary><category term="R"></category><category term="Tesselation"></category><category term="Voronoi polygons"></category><category term="Free open-source software (FOSS)"></category><category term="How to"></category><category term="R spatial"></category></entry><entry><title>Python, Matlab, and R</title><link href="http://www.carsonfarmer.com/2009/08/python-matlab-and-r/" rel="alternate"></link><updated>2009-08-12T15:29:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-08-12:2009/08/python-matlab-and-r/</id><summary type="html">&lt;p&gt;One project I&amp;#8217;m working on at the moment involves exploring a dynamic
extension of the Isomap algorithm for visualising constantly varying
real-world road networks. Currently, we are testing out the method on a
small scale simulated road network, and most of the original code
(written by &lt;a href="http://ticc.uvt.nl/~lvdrmaaten/Laurens_van_der_Maaten/Home.html"&gt;Laurens van der Maaten&lt;/a&gt;, with updates by &lt;a href="http://ncg.nuim.ie/ncg/people/staff/pozdnoukhov/index.shtml"&gt;Alexei
Pozdnoukhov&lt;/a&gt;), was done in Matlab. Since this work is eventually going
to have to run on relatively large datasets, and probably behind the
scenes on a server somewhere, we decided that Python was the way to go.
The goal therefore was to reproduce the Matlab code using only Python
libraries, and the fewer additional libraries required, the better.
&lt;/p&gt;
&lt;p&gt;The most difficult stage in all this was to convert the Matlab code to
Python code, while still remaining relatively fast and simple. The
solution is of course the NumPy Python library, and nothing could have
made this conversion more simple than this &lt;a href="http://www.carsonfarmer.com/uploads/matlab-python-xref.pdf"&gt;pdf document&lt;/a&gt;. It is
basically a syntax conversion chart between Matlab/Octave, Python, and
R&amp;#8230;&amp;nbsp;brilliant!&lt;/p&gt;
&lt;p&gt;Check out Vidar Bronken Gundersen&amp;#8217;s &lt;a href="http://mathesaurus.sourceforge.net/"&gt;Mathesaurus&lt;/a&gt; site for this, and
other useful resources for converting between different mathematical
computation&amp;nbsp;environments.&lt;/p&gt;</summary><category term="Matlab"></category><category term="Python"></category><category term="R"></category><category term="Free open-source software (FOSS)"></category></entry><entry><title>‘Watch’ long running processes</title><link href="http://www.carsonfarmer.com/2009/07/keep-an-eye-on-long-running-processes/" rel="alternate"></link><updated>2009-07-08T12:23:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-07-08:2009/07/keep-an-eye-on-long-running-processes/</id><summary type="html">&lt;p&gt;The other day I was loading a shapefile of approximately 11 million
records into a PostGIS database (stay tuned for more on that later) and
I wanted to know when shp2pgsql was done. Instead of continually
checking the console, I decided to &amp;#8216;watch&amp;#8217; the process using the *nix
command &lt;code&gt;watch&lt;/code&gt;. I discovered this handy tool a while ago, and have
found that for long running processes, I can use &lt;code&gt;watch&lt;/code&gt; to notify me
when the process has finished, using the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;watch -ben 1 &lt;span class="s2"&gt;&amp;quot;ps u -C shp2pgsql&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;In this case, the three parameters &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; tell &lt;code&gt;watch&lt;/code&gt; to
&lt;code&gt;[b]&lt;/code&gt;eep if the command has a non-zero exit (in this case when &lt;code&gt;shp2pgsql&lt;/code&gt;
is no longer running), &lt;code&gt;[e]&lt;/code&gt;xit watch if the command has a non-zero exit
(again when &lt;code&gt;shp2pgsql&lt;/code&gt; is done), and the i&lt;code&gt;[n]&lt;/code&gt;terval (in seconds) to wait
between updates (in this case 1 second). The rest of the command,
&lt;code&gt;ps u -C&lt;/code&gt; is the command that &lt;code&gt;watch&lt;/code&gt; runs each second. In this case, it
uses &lt;code&gt;ps&lt;/code&gt; to report info on the running process, where the &lt;code&gt;-C&lt;/code&gt; flag
tells &lt;code&gt;ps&lt;/code&gt; to report the process matching the name &lt;code&gt;"shp2pgsql"&lt;/code&gt;. When
&lt;code&gt;shp2pgsql&lt;/code&gt; is no longer running, &lt;code&gt;ps u -C&lt;/code&gt; will have a non-zero exit,
and I get my beep: very handy!
This can be made even more useful by changing the above command&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;watch -ben 1 &lt;span class="s2"&gt;&amp;quot;ps u -C shp2pgsql&amp;quot;&lt;/span&gt;; mail -s &lt;span class="s2"&gt;&amp;quot;Process complete!&amp;quot;&lt;/span&gt; email.address@some.one &amp;lt; /home/username/email_text.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;#8217;ve added the &lt;code&gt;mail&lt;/code&gt; command to send me an email when &lt;code&gt;watch&lt;/code&gt;
exits (the &amp;#8216;;&amp;#8217; simply allows me to have two commands on one line). If
you&amp;#8217;re really smart, you could probably have &lt;code&gt;watch&lt;/code&gt; save important info
about the running process to a file and send this with the email, but
for my purposes, the above works just&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;The next step is figuring out how to make my computer text me when a
long process is complete&amp;#8230; and thanks to &lt;a href="https://twitter.com/w_dowling"&gt;Will&lt;/a&gt;, I may be &lt;a href="http://o2sms.sourceforge.net/"&gt;one step
closer&lt;/a&gt; to this&amp;nbsp;goal.&lt;/p&gt;</summary><category term="long running"></category><category term="PostGIS"></category><category term="watch"></category><category term="Free open-source software (FOSS)"></category><category term="How to"></category><category term="Linux"></category></entry><entry><title>Syntax highlighting with PyQt</title><link href="http://www.carsonfarmer.com/2009/07/syntax-highlighting-with-pyqt/" rel="alternate"></link><updated>2009-07-02T15:28:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-07-02:2009/07/syntax-highlighting-with-pyqt/</id><summary type="html">&lt;p&gt;A few months ago I decided to add syntax highlighting capabilities to a
&lt;a href="http://www.ftools.ca/plugins.html"&gt;piece of software&lt;/a&gt; that I have been working on. Since it is a PyQt
based application, the obvious choice for implementing syntax
highlighting was to use Qt&amp;#8217;s QSyntaxHighlighter. Unfortunately, there
weren&amp;#8217;t many examples around that implemented syntax highlighting in
Python, so I decided to post my own.
&lt;/p&gt;
&lt;p&gt;The Python file used in this example is &lt;a href="http://www.carsonfarmer.com/uploads/highlighter.py"&gt;available here&lt;/a&gt;.
To implement syntax highlighting, we need to subclass
QSyntaxHighlighter, reimplement the &lt;code&gt;highlightBlock&lt;/code&gt; function, and
specify several highlighting rules. Generally, a rule consists of a
QRegExp pattern and a QTextCharFormat instance. For this example, the
syntax rules are based on the R statistical programming language. The
various rules can be stored using a Python&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHighlighter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QSyntaxHighlighter&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QSyntaxHighlighter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextCharFormat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setForeground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;darkBlue&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFontWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QStringList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;break&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;for&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="s"&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;repeat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;switch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="s"&gt;&amp;quot;try&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;while&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HighlightingRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MyHighlighter&lt;/code&gt; is the subclassed &lt;code&gt;QSyntaxHighlighter&lt;/code&gt; class, and will
contain our reimplemented &lt;code&gt;highlightBlock&lt;/code&gt; function. The above example
is for the &lt;code&gt;keyword&lt;/code&gt; rule, which recognizes the most common R keywords.
We give &lt;code&gt;keyword&lt;/code&gt; a bold, dark blue font. For each keyword, we assign
the keyword and the specified format to a &lt;code&gt;HighlightingRule&lt;/code&gt; object (see
the attached Python file) and append the object to our list of rules.
We can specify further syntax rules, including &lt;code&gt;reservedClasses&lt;/code&gt;,
&lt;code&gt;assignmentOperators&lt;/code&gt;, and &lt;code&gt;numbers&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;reservedClasses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextCharFormat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;reservedClasses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setForeground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;darkRed&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reservedClasses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFontWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QStringList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;complex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;data.frame&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;double&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;factor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;logical&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;numeric&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="s"&gt;&amp;quot;vector&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HighlightingRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reservedClasses&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assignmentOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextCharFormat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(&amp;lt;){1,2}-&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assignmentOperator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setForeground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assignmentOperator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFontWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HighlightingRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assignmentOperator&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextCharFormat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setMinimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setForeground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HighlightingRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a QSyntaxHighlighter object is created, its highlightBlock()
function will be called automatically whenever it is necessary by the
rich text engine, highlighting the given text block. To perform the
actual formatting, the QSyntaxHighlighter class provides the &lt;code&gt;setFormat&lt;/code&gt;
function. This function operates on the text block that is passed as
argument to the &lt;code&gt;highlightBlock&lt;/code&gt; function. The specified format is
applied to the text from the given start position for the given length.
The formatting properties set in the given format are merged at display
time with the formatting information stored directly in the&amp;nbsp;document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;highlightBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;highlightingRules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indexIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matchedLength&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCurrentBlockState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This process is repeated until the last occurrence of the pattern in the
current text block is found. For rules that apply over multiple blocks
or lines, further logic is needed. For an example, see the
&lt;a href="http://doc.trolltech.com/4.2/richtext-syntaxhighlighter.html"&gt;QSynatxHighlighter&lt;/a&gt; documentation.
In order to apply the syntax highlighter to a QTextEdit, we simply
create an instance of our QSyntaxHighlighter subclass, and pass it the
QTextEdit or QTextDocument that we want the syntax highlighting to be
applied to, as the following test application&amp;nbsp;demonstrates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;QMainWindow&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;highlighter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyHighlighter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCentralWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Syntax Highlighter Example&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once implemented, the above example produces output like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.carsonfarmer.com/images/screenshot.png" title="screenshot"&gt;&lt;img alt="image" src="http://www.carsonfarmer.com/images/screenshot.png" title="screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="PyQT"></category><category term="Python"></category><category term="Syntax highlighting"></category><category term="Free open-source software (FOSS)"></category></entry><entry><title>Open up your online maps with OpenStreetMap</title><link href="http://www.carsonfarmer.com/2009/01/open-up-your-web-maps-with-openstreetmap/" rel="alternate"></link><updated>2009-01-26T23:27:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-01-26:2009/01/open-up-your-web-maps-with-openstreetmap/</id><summary type="html">&lt;p&gt;OpenStreetMap (&lt;span class="caps"&gt;OSM&lt;/span&gt;) is a project designed to create and provide free
spatial data (street maps) to anyone and everyone who wants them. It is
based on an open-source &lt;a href="http://wiki.openstreetmap.org/wiki/FAQ#Why_OpenStreetMap.3F" title="OpenStreetMap Philosophy"&gt;philosophy&lt;/a&gt;, and combines wiki-like user
generated data, with &lt;a href="http://www.opengeodata.org/?p=262"&gt;free access&lt;/a&gt;, allowing users to create, edit,
download, and use &lt;span class="caps"&gt;OSM&lt;/span&gt; data to their hearts content. According to the
&lt;a href="http://www.openstreetmap.org/index.html"&gt;&lt;span class="caps"&gt;OSM&lt;/span&gt; website&lt;/a&gt;, &amp;#8220;the project was started because most maps you think of
as free actually have legal or technical restrictions on their use,
holding back people from using them in creative, productive or
unexpected ways.&amp;#8221; There are now tones of websites and open-source
software projects that incorporate &lt;span class="caps"&gt;OSM&lt;/span&gt; data, and the growing popularity
of the site means that the data is only going to get better (more
accurate) and bigger (more data).
&lt;/p&gt;
&lt;p&gt;Essentially, OpenStreetMap contributors go out into the world
with handheld &lt;span class="caps"&gt;GPS&lt;/span&gt; units, and an insatiable need to map everything around
them. They track their own movements down streets and trails, and along
the way they record street names, parks, towns, cities, and other points
of interest (POIs). All these &lt;span class="caps"&gt;GPS&lt;/span&gt; tracks can be uploaded into the &lt;span class="caps"&gt;OSM&lt;/span&gt;
database, along with place names, street names, and any other pertinent
information (type of road, and/or road intersections). All the while,
others can do the same thing, in the same area, adjusting the same data,
making more and more accurate maps of the&amp;nbsp;region.&lt;/p&gt;
&lt;p&gt;If all this free data isn&amp;#8217;t enough, &lt;span class="caps"&gt;OSM&lt;/span&gt; also processes the uploaded
data, and produces detailed street-level maps which are freely available
for publishing on websites. If fact, in 5 simple steps, you too can have
a beautiful &lt;span class="caps"&gt;OSM&lt;/span&gt; powered map on your&amp;nbsp;website.&lt;/p&gt;
&lt;h3&gt;How to put an OpenStreetMap on your own&amp;nbsp;site&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Browse the OpenStreetMap and find the area you want to map, using
   the zoom tools to zoom right in to your area of&amp;nbsp;interest.&lt;/li&gt;
&lt;li&gt;Select the export&amp;nbsp;tab.&lt;/li&gt;
&lt;li&gt;When choosing the export format, select &amp;#8220;Embeddable &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;#8221;.&lt;/li&gt;
&lt;li&gt;If you want, pop in a marker symbol so everyone knows where to&amp;nbsp;look&amp;#8230;&lt;/li&gt;
&lt;li&gt;Copy the provided &lt;span class="caps"&gt;HTML&lt;/span&gt; code, and paste into your site wherever you want the map to show&amp;nbsp;up.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For an example, check out &lt;a href="/contact"&gt;my contact page&lt;/a&gt;. As you can see, &lt;strike&gt;there
aren&amp;#8217;t a lot of people collecting data in Maynooth&amp;#8230;&lt;/strike&gt;, recent work in
Maynooth has created an extremely rich, usable, and downright decent map
of Maynooth. Nice work Blazej&amp;nbsp;Ciepluch!&lt;/p&gt;</summary><category term="Online Maps"></category><category term="Open-access"></category><category term="Open-source"></category><category term="OpenStreetMap"></category><category term="Geographic information science/systems (GIS)"></category></entry><entry><title>Understanding spatial reference systems</title><link href="http://www.carsonfarmer.com/2009/01/understanding-spatial-reference-systems/" rel="alternate"></link><updated>2009-01-12T15:31:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2009-01-12:2009/01/understanding-spatial-reference-systems/</id><summary type="html">&lt;p&gt;For those of you who are still unclear about what exactly a spatial
reference system is, how it is used, and what it means for your data, I
found a pretty good quick guide to &lt;a href="http://www.sharpgis.net/post/2007/05/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx"&gt;spatial references, coordinate
systems, projections, datums and ellipsoids&lt;/a&gt;. This article was written
by Morten Nielsen (who works for &lt;span class="caps"&gt;ESRI&lt;/span&gt;), and it does a good job of
quickly and simply describing what makes up a spatial reference system,
and some of the errors that people make when talking about their spatial&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Having a good grasp of this stuff is important when working with spatial
data, so guides like the one above should really only be used as a quick
reference to more in-depth material covering these concepts. Check out
the links below if you want to learn a little bit&amp;nbsp;more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webhelp.esri.com/arcgisdesktop/9.3/body.cfm?tocVisable=0&amp;amp;ID=87&amp;amp;TopicName=An%20overview%20of%20map%20projections#"&gt;An &lt;span class="caps"&gt;ESRI&lt;/span&gt; overview of map&amp;nbsp;projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spatialreference.org/"&gt;spatialreference.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.progonos.com/furuti/MapProj/Normal/TOC/cartTOC.html"&gt;Carlos A. Furuti&amp;#8217;s Map Projection&amp;nbsp;Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kartografie.nl/geometrics/Map%20projections/mappro.html"&gt;Knippers, &lt;span class="caps"&gt;R.A.&lt;/span&gt;- Map&amp;nbsp;projections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Coordinates"></category><category term="Spatial data"></category><category term="Spatial reference systems"></category><category term="WGS84"></category><category term="Geographic information science/systems (GIS)"></category></entry><entry><title>gedit: The ultimate LaTeX editor</title><link href="http://www.carsonfarmer.com/2008/12/gedit-the-ultimate-latex-editor/" rel="alternate"></link><updated>2008-12-12T00:56:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2008-12-12:2008/12/gedit-the-ultimate-latex-editor/</id><summary type="html">&lt;p&gt;Out of the box &lt;em&gt;gedit&lt;/em&gt; is a basic text editor, but it comes equipped
with about 12 standard plugins, and another 9 readily available. In
addition to this, there are a range of &amp;#8216;third-party&amp;#8217; plugins developed
to do various specific tasks, such as assist you in writing and
exporting LaTeX documents!

First, get all the basic&amp;nbsp;plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install gedit-plugins&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and enable them in gedit by going to &lt;code&gt;Edit &amp;gt; Preferences &amp;gt; Plugins&lt;/code&gt;, and
checking the ones that you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Second, make sure you have all the required dependencies for the actual
$\LaTeX$ plugin:
1. The plugin is written in Python 2.4 and relies on PyGTK 2.4: &lt;code&gt;sudo apt-get install python-gtk2&lt;/code&gt;
2. Ensure that you have rubber installed. It is used for automated document 
compiling: &lt;code&gt;sudo apt-get install rubber&lt;/code&gt;
3. To use the &lt;span class="caps"&gt;DVI&lt;/span&gt; inverse search you need the Python bindings for D-&lt;span class="caps"&gt;BUS&lt;/span&gt;: &lt;code&gt;sudo apt-get install python-dbus&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Third, download the latest version of the $\LaTeX$ plugin from &lt;a href="http://live.gnome.org/Gedit/LaTeXPlugin"&gt;here&lt;/a&gt;,
and extract and copy the contained folder and a file to
&lt;code&gt;~/.gnome2/gedit/plugins&lt;/code&gt;. You may have to create &lt;code&gt;gedit/plugins&lt;/code&gt; if you 
haven&amp;#8217;t installed any other plugins&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;After that, restart &lt;code&gt;gedit&lt;/code&gt; and activate the plugin in the settings
dialog as we did with the other&amp;nbsp;plugins.&lt;/p&gt;
&lt;p&gt;Now you have an editor with all sorts of handy functions, including
inline spell check, code completion, tag, symbol, and character
insertion, a file and document browser, and an embedded terminal, as
well as tools to automatically create new $\LaTeX$ files, insert graphics,
tables, and matrices, and a fantastic dialog for automatically inserting
BibTeX entries. Also, if you&amp;#8217;re an R user who creates reports etc. you
can use Sweave directly from gedit to embed R code in your LaTeX&amp;nbsp;documents.&lt;/p&gt;
&lt;p&gt;All this in a lightweight text editor,&amp;nbsp;nice!&lt;/p&gt;</summary><category term="gedit"></category><category term="LaTeX"></category><category term="Free open-source software (FOSS)"></category><category term="How to"></category><category term="Linux"></category></entry><entry><title>Quick guide to setting up a PostGIS database</title><link href="http://www.carsonfarmer.com/2008/11/quick-guide-to-setting-up-postgis-database/" rel="alternate"></link><updated>2008-11-28T12:01:00-05:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2008-11-28:2008/11/quick-guide-to-setting-up-postgis-database/</id><summary type="html">&lt;p&gt;Recently I decided to seriously start using PostGIS to manage my spatial
data. As I have several projects on the go, organizing and managing my
data effectively has become extremely important, and PostGIS is by far
the most convenient way to do this. There is lots of documentation out
there that explains in detail how to set up PostGIS, but by far the best
reference I&amp;#8217;ve found is from &lt;a href="http://tim.linfiniti.com/" title="Tim Sutton's blog"&gt;Tim Sutton&amp;#8217;s blog&lt;/a&gt;, mainly because he
uses Ubuntu, and sudo-apt gets everything you need to have PostGIS
working in minutes.
&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href="http://tim.linfiniti.com/page/3" title="Setting Up Postgis on Ubuntu"&gt;link to the article&lt;/a&gt;, and below is a quote from his&amp;nbsp;blog:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another reason I love Ubuntu - getting postgis + postgresql is really&amp;nbsp;easy&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install postgis postgresql-8.3-postgis
sudo su postgres
createuser -s -d -r -l -P -E -e timlinux
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Enter prompts following above commands as needed. Now you have
postgres installed and a user created. Next create an empty spatial&amp;nbsp;database:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createdb qgis
createlang plpgsql qgis
psql qgis &amp;lt; /usr/share/postgresql-8.3-postgis/lwpostgis.sql
psql qgis &amp;lt; /usr/share/postgresql-8.3-postgis/spatial_ref_sys.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Easy&amp;nbsp;peasy.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="PostGIS"></category><category term="Quick Guide"></category><category term="Ubuntu"></category><category term="Free open-source software (FOSS)"></category><category term="Geographic information science/systems (GIS)"></category><category term="How to"></category><category term="Linux"></category></entry><entry><title>View spatial data attribute tables in R</title><link href="http://www.carsonfarmer.com/2008/10/view-spatial-data-attribute-tables-in-r/" rel="alternate"></link><updated>2008-10-14T13:44:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2008-10-14:2008/10/view-spatial-data-attribute-tables-in-r/</id><summary type="html">&lt;p&gt;Many &lt;span class="caps"&gt;GIS&lt;/span&gt; offer the ability to view the attribute table of a vector
layer. While this is perhaps less obvious in the R environment, it is
not impossible. The following command allows you to visually inspect,
and change any data.frame (or other vector, matrix, etc.), including
Spatial*DataFrames.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;invisible&lt;span class="p"&gt;(&lt;/span&gt;edit&lt;span class="p"&gt;(&lt;/span&gt;spatial_layer&lt;span class="o"&gt;@&lt;/span&gt;data&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: &lt;code&gt;invisible&lt;/code&gt; allows you to close the viewer without filling the
console with the attributes of the table. You could also&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;new_data &lt;span class="o"&gt;=&lt;/span&gt; edit&lt;span class="p"&gt;(&lt;/span&gt;spatial_layer&lt;span class="o"&gt;@&lt;/span&gt;data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to assign changes made to the data to a new variable, or&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;spatial_layer&lt;span class="o"&gt;@&lt;/span&gt;data &lt;span class="o"&gt;=&lt;/span&gt; edit&lt;span class="p"&gt;(&lt;/span&gt;spatial_layer&lt;span class="o"&gt;@&lt;/span&gt;data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fix&lt;span class="p"&gt;(&lt;/span&gt;spatial_layer&lt;span class="o"&gt;@&lt;/span&gt;data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to make changes to the Spatial*DataFrame&amp;nbsp;itself.&lt;/p&gt;</summary><category term="Free open-source software (FOSS)"></category><category term="Geographic information science/systems (GIS)"></category><category term="How to"></category><category term="R spatial"></category></entry><entry><title>R spatial indentify tool</title><link href="http://www.carsonfarmer.com/2008/09/r-spatial-indentify-tool/" rel="alternate"></link><updated>2008-09-23T12:36:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2008-09-23:2008/09/r-spatial-indentify-tool/</id><summary type="html">&lt;p&gt;This is useful for visually exploring R spatial data such as
&lt;code&gt;SpatialPointDataFrames&lt;/code&gt; or &lt;code&gt;SpatialGridDataFrames&lt;/code&gt;. By clicking on various
features, the value at that point will be&amp;nbsp;displayed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;rgdal&lt;span class="p"&gt;)&lt;/span&gt;
y &lt;span class="o"&gt;=&lt;/span&gt; readGDAL&lt;span class="p"&gt;(&lt;/span&gt;system.file&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pictures/Rlogo.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; package&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rgdal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; band&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
y.grid &lt;span class="o"&gt;=&lt;/span&gt; y&lt;span class="o"&gt;@&lt;/span&gt;grid
y.coords &lt;span class="o"&gt;=&lt;/span&gt; coordinates&lt;span class="p"&gt;(&lt;/span&gt;y.grid&lt;span class="p"&gt;)&lt;/span&gt; 
image&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;)&lt;/span&gt;
identify&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;=&lt;/span&gt;y.coords&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; n&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to coordinates (in this case because &lt;code&gt;y.coords&lt;/code&gt;
contains both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates, &lt;code&gt;y&lt;/code&gt; can be set to &lt;code&gt;NULL&lt;/code&gt;), and &lt;code&gt;n&lt;/code&gt; is the
number of features to&amp;nbsp;identify.&lt;/p&gt;</summary><category term="Free open-source software (FOSS)"></category><category term="Geographic information science/systems (GIS)"></category><category term="How to"></category><category term="Linux"></category><category term="R spatial"></category></entry><entry><title>Find and replace multiple files</title><link href="http://www.carsonfarmer.com/2008/09/find-and-replace-multiple-files/" rel="alternate"></link><updated>2008-09-08T09:09:00-04:00</updated><author><name>cfarmer</name></author><id>tag:www.carsonfarmer.com,2008-09-08:2008/09/find-and-replace-multiple-files/</id><summary type="html">&lt;p&gt;Recently, I had to do a find and replace over several individual python
files.There are plenty of scripts out there which will accomplish this,
but I was interested in something simple, and preferably a single line
command. After a lot of Google-ing, I ended up finding &lt;a href="http://rushi.wordpress.com/2008/08/05/find-replace-across-multiple-files-in-linux/#comment-26487"&gt;this post&lt;/a&gt;,
which does a great job of explaining how to do this in linux. The basic
command&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s2"&gt;&amp;quot;\*.py&amp;quot;&lt;/span&gt; -print | xargs sed -i &lt;span class="s1"&gt;&amp;#39;s/foo/bar/g&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;find . -name "*.py"&lt;/code&gt; is used to find all python files (recursively) in 
your directory,  and &lt;code&gt;xargs sed -i 's/foo/bar/g'&lt;/code&gt; is used to replace all 
occurrences of &amp;#8216;foo&amp;#8217; in the files with &amp;#8216;bar&amp;#8217;.
The link above gives a good explanation of each command (find, xargs, sed), 
and how they combine together to create this useful single line&amp;nbsp;command.&lt;/p&gt;</summary><category term="Helpful tips"></category><category term="Linux"></category><category term="How to"></category></entry></feed>