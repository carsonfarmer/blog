<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carson Farmer</title><link>http://www.carsonfarmer.com/</link><description>www.carsonfarmer.com</description><atom:link href="http://www.carsonfarmer.com/feeds/statistical-modeling-for-python.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 09 Nov 2013 12:00:00 -0500</lastBuildDate><item><title>Data: Cases, Variables, Samples</title><link>http://www.carsonfarmer.com/2013/11/statistical-modeling-python-data/</link><description>&lt;p&gt;The second in a &lt;a href="http://www.carsonfarmer.com/category/statistical-modeling-for-python.html"&gt;series of tutorials&lt;/a&gt; on using Python for introductory 
statistical analysis, this tutorial covers &lt;strong&gt;data&lt;/strong&gt;, including cases, variables, 
samples, and a whole lot&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Data used in statistical modeling are usually organized into tables, often created using spreadsheet software. Most people presume that the same software used to create a table of data should be used to display and analyze it. This is part of the reason for the popularity of spreadsheet programs such as &amp;#8216;Excel&amp;#8217; and &amp;#8216;Google&amp;nbsp;Spreadsheets&amp;#8217;.&lt;/p&gt;
&lt;p&gt;For serious statistical work, it&amp;#8217;s helpful to take another approach that strictly separates the processes of data collection and of data analysis: use one program to create data ﬁles and another program to analyze the data stored in those ﬁles. By doing this, one guarantees that the original data are not modiﬁed accidentally in the process of analyzing them. This also makes it possible to perform many diﬀerent analyses of the data; modelers often create and compare many diﬀerent models of the same&amp;nbsp;data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="reading-tabular-data-into-python"&gt;Reading Tabular Data into&amp;nbsp;Python&lt;/h2&gt;
&lt;p&gt;Data is central to statistics, and the tabular arrangement of data is very common. Accordingly, Python provides a large number of ways to read in tabular data. These vary depending on how the data are stored, where they are located, etc. To help keep things as simple as possible, the &amp;#8216;pandas&amp;#8217; Python library iprovides an operator, &lt;code&gt;read_csv()&lt;/code&gt; that allows you to access data ﬁles in tabular format on your computer as well as data stored in repositories such as the one associated with the &amp;#8216;Statistical Modeling: A Fresh Approach&amp;#8217; book, or one that a course instructor might set up for his or her&amp;nbsp;students.&lt;/p&gt;
&lt;p&gt;The &amp;#8216;pandas&amp;#8217; library is &lt;a href="http://pandas.pydata.org/"&gt;available here&lt;/a&gt;, and you can follow these &lt;a href="http://pandas.pydata.org/pandas-docs/stable/install.html"&gt;installation instructions&lt;/a&gt; to get it working on your computer (installation via &lt;code&gt;pip&lt;/code&gt; is the easiest method). Once you have &amp;#8216;pandas&amp;#8217; installed, you need to &lt;code&gt;import pandas&lt;/code&gt; in order to to use &lt;code&gt;read_csv()&lt;/code&gt;, as well as a variety of other &amp;#8216;pandas&amp;#8217; operators that you will encounter later (it is also usually a good idea to &lt;code&gt;import numpy as np&lt;/code&gt; at the same time that we &lt;code&gt;import pandas as pd&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note left shadow"&gt; An alternative to writing &lt;code&gt;pds.xxx&lt;/code&gt; when calling each &amp;#8216;pandas&amp;#8217; operator is to import all available operators from &amp;#8216;pandas&amp;#8217; at once: &lt;code&gt;from pandas import *&lt;/code&gt;. This makes things a bit easier in terms of typing, but can sometimes lead to confusion when operators from different libraries have the same&amp;nbsp;name. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You need do this only once in each session of Python, and on systems such as IPython, the library will sometimes be reloaded automatically (if you get an error message, it’s likely that the &amp;#8216;pandas&amp;#8217; library has not been installed on your system. Follow the installation instructions provided at the link&amp;nbsp;above.)&lt;/p&gt;
&lt;p&gt;Reading in a data table that’s been connected with &lt;code&gt;read_csv()&lt;/code&gt; is simply a matter of knowing the name (and location) of the data set. For instance, one data table used in examples in the &amp;#8216;Statistical Modeling: A Fresh Approach&amp;#8217; book is &lt;code&gt;&amp;quot;swim100m.csv&amp;quot;&lt;/code&gt;. To read in this data table and create an object in Python that contains the data, use a command like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;span class="dataset shadow"&gt;&lt;i class="icon-flag" style="font-size: 1.5em;"&gt;&lt;/i&gt; &lt;a href="http://www.mosaic-web.org/go/datasets/swim100m.csv"&gt;&lt;code&gt;swim100m.csv&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[2]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.mosaic-web.org/go/datasets/swim100m.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The csv part of the name in &lt;code&gt;&amp;quot;swim100m.csv&amp;quot;&lt;/code&gt; indicates that the ﬁle has been stored in a particular data format, comma-separated values that is handled by spreadsheet software as well as many other kinds of software. The part of this command that requires creativity is choosing a name for the Python object that will hold the data. In the above command it is called &lt;code&gt;swim&lt;/code&gt;, but you might prefer another name (e.g., &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;sdata&lt;/code&gt; or even &lt;code&gt;ralph&lt;/code&gt;). Of course, it&amp;#8217;s sensible to choose names that are short, easy to type and remember, and remind you what the contents of the object are&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;To help you identify data tables that can be accessed through &lt;code&gt;read_csv()&lt;/code&gt;, examples from these tutorials will be marked with a flag &lt;i class="icon-flag"&gt;&lt;/i&gt; containing the name of the data file. The files themselves are mostly available automatically through the web site for the &amp;#8216;Statistical Modeling: A Fresh Approach&amp;#8217;&amp;nbsp;book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="data-frames"&gt;Data&amp;nbsp;Frames&lt;/h3&gt;
&lt;p&gt;The type of Python object created by &lt;code&gt;read_csv()&lt;/code&gt; is called a data frame and is essentially a tabular layout. To illustrate, here are the ﬁrst several cases of the &lt;code&gt;swim&lt;/code&gt; data frame created by the previous use of &lt;code&gt;read_csv()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[3]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[3]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt; 1905&lt;/td&gt;
      &lt;td&gt; 65.8&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt; 1908&lt;/td&gt;
      &lt;td&gt; 65.6&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt; 1910&lt;/td&gt;
      &lt;td&gt; 62.8&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt; 1912&lt;/td&gt;
      &lt;td&gt; 61.6&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt; 1918&lt;/td&gt;
      &lt;td&gt; 61.4&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that the &lt;code&gt;head()&lt;/code&gt; function, one of several functions built-into &amp;#8216;pandas&amp;#8217; data frames, is a function of the Python object (data frame) itself; not from the main &amp;#8216;pandas&amp;#8217;&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;Data frames, like tabular data generally, involve variables and cases. In &amp;#8216;pandas&amp;#8217; data frames, each of the variables is given a name. You can refer to the variable by name in a couple of diﬀerent ways. To see the variable names in a data frame, something you might want to do to remind yourself of how names a spelled and capitalized, use the &lt;code&gt;columns&lt;/code&gt; attribute of the data frame&amp;nbsp;object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[4]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[4]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
Index([u&amp;apos;year&amp;apos;, u&amp;apos;time&amp;apos;, u&amp;apos;sex&amp;apos;], dtype=object)
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that we have &lt;strong&gt;not&lt;/strong&gt; used brackets &lt;code&gt;()&lt;/code&gt; in the above command. This is because &lt;code&gt;columns&lt;/code&gt; is not a function; it is an &lt;em&gt;attribute&lt;/em&gt; of the data frame. Attributes add &amp;#8216;extra&amp;#8217; information (or metadata) to objects in the form of additional Python objects. In this case, the attributes describe the names (and data types) of the columns. Another way to get quick information about the variables in a data frame is with &lt;code&gt;describe()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[5]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[5]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;   62.000000&lt;/td&gt;
      &lt;td&gt; 62.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt; 1952.145161&lt;/td&gt;
      &lt;td&gt; 59.924194&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;   29.472881&lt;/td&gt;
      &lt;td&gt;  9.916588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt; 1905.000000&lt;/td&gt;
      &lt;td&gt; 47.840000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt; 1924.500000&lt;/td&gt;
      &lt;td&gt; 53.642500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt; 1956.500000&lt;/td&gt;
      &lt;td&gt; 56.880000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt; 1975.750000&lt;/td&gt;
      &lt;td&gt; 65.200000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt; 2004.000000&lt;/td&gt;
      &lt;td&gt; 95.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This provides a numerical summary of each of the variables contained in the data frame. To keep things simple, the output from &lt;code&gt;describe()&lt;/code&gt; is itself a data&amp;nbsp;frame.&lt;/p&gt;
&lt;p&gt;There are lots of different functions and attributes available for data frames (and any other Python objects). For instance, to see how many cases and variables there are in a data frame, you can use the &lt;code&gt;shape&lt;/code&gt; attribute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[6]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[6]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
(62, 3)
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="variables-in-data-frames"&gt;Variables in Data&amp;nbsp;Frames&lt;/h3&gt;
&lt;p&gt;Perhaps the most common operation on a data frame is to refer to the values in a single variable. The two ways you will most commonly use involve referring to a variable by string-quoted name (&lt;code&gt;swim[&amp;quot;year&amp;quot;]&lt;/code&gt;) and as an attribute of a data frame without quotes (&lt;code&gt;swim.year&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note right shadow"&gt; Each column or variable in a &amp;#8216;pandas&amp;#8217; data frame is called a &amp;#8216;series&amp;#8217;, and each series can contain one of many different data types. For more information on series&amp;#8217;, data frames, and other objects in &amp;#8216;pandas&amp;#8217;, &lt;a href="http://pandas.pydata.org/pandas-docs/dev/dsintro.html"&gt;have a look here&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Most of the statistical modeling functions you will encounter in these tutorials are designed to work with data frames and allow you to refer directly to variables within a data frame. For&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[7]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[7]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1952.1451612903227
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[8]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[8]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1905
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It is also possible to combine &amp;#8216;numpy&amp;#8217; operators with &amp;#8216;pandas&amp;#8217;&amp;nbsp;variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[9]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[9]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1905
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[10]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[10]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1905
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The &lt;code&gt;swim&lt;/code&gt; portion of the above commands tells Python which data frame we want to operate on. Leaving oﬀ that argument leads to an&amp;nbsp;error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[11]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyerr"&gt;
&lt;pre&gt;
&lt;span class="ansired"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansired"&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansigreen"&gt;&amp;lt;ipython-input-11-2ef03df1cde8&amp;gt;&lt;/span&gt; in &lt;span class="ansicyan"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="ansiblue"&gt;()&lt;/span&gt;
&lt;span class="ansigreen"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansiyellow"&gt; &lt;/span&gt;year&lt;span class="ansiyellow"&gt;.&lt;/span&gt;min&lt;span class="ansiyellow"&gt;(&lt;/span&gt;&lt;span class="ansiyellow"&gt;)&lt;/span&gt;&lt;span class="ansiyellow"&gt;&lt;/span&gt;

&lt;span class="ansired"&gt;NameError&lt;/span&gt;: name &amp;apos;year&amp;apos; is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Of course, you know that the variable year is deﬁned &lt;em&gt;within&lt;/em&gt; the data frame &lt;code&gt;swim&lt;/code&gt;, but you have to tell Python which data frame you want to operate on explicitly, otherwise it doesn’t know where to find the variable(s). Think of this notation as referring to the variable by both its family name (the data frame’s name,&lt;code&gt;&amp;quot;swim&amp;quot;&lt;/code&gt;) and its given name (&lt;code&gt;&amp;quot;year&amp;quot;&lt;/code&gt;), something like &lt;code&gt;einstein.albert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The advantage of referring to variables by name becomes evident when you construct statements that involve more than one variable within a data frame. For instance, here&amp;#8217;s a calculation of the mean year, separately for (grouping by) the different&amp;nbsp;sexes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[12]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[12]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
sex
F      1950.677419
M      1953.612903
Name: year, dtype: float64
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You will see much more of the &lt;code&gt;groupby&lt;/code&gt; function, starting in Tutorial 4 (Group-wise Models). It&amp;#8217;s the &amp;#8216;pandas&amp;#8217; way of grouping or aggregating data frames. In subsequent chapters, we will build on this notion to develop more complex ways of &amp;#8220;grouping&amp;#8221; and &amp;#8220;modeling&amp;#8221; variables &amp;#8220;by&amp;#8221; other&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;Both the &lt;code&gt;mean()&lt;/code&gt; and &lt;code&gt;min()&lt;/code&gt; functions have been arranged by the &amp;#8216;pandas&amp;#8217; library to look in the data frame when interpreting variables, but not all Python functions are designed this way. For&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[13]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyerr"&gt;
&lt;pre&gt;
&lt;span class="ansired"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansired"&gt;AttributeError&lt;/span&gt;                            Traceback (most recent call last)
&lt;span class="ansigreen"&gt;&amp;lt;ipython-input-13-e6382fdf6716&amp;gt;&lt;/span&gt; in &lt;span class="ansicyan"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="ansiblue"&gt;()&lt;/span&gt;
&lt;span class="ansigreen"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansiyellow"&gt; &lt;/span&gt;swim&lt;span class="ansiyellow"&gt;.&lt;/span&gt;year&lt;span class="ansiyellow"&gt;.&lt;/span&gt;sqrt&lt;span class="ansiyellow"&gt;(&lt;/span&gt;&lt;span class="ansiyellow"&gt;)&lt;/span&gt;&lt;span class="ansiyellow"&gt;&lt;/span&gt;

&lt;span class="ansired"&gt;AttributeError&lt;/span&gt;: &amp;apos;Series&amp;apos; object has no attribute &amp;apos;sqrt&amp;apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;When you encounter a function that isn&amp;#8217;t supported by data frames, you can use &amp;#8216;numpy&amp;#8217; functions and the special &lt;code&gt;apply&lt;/code&gt; function built-into data frames (note that the &lt;code&gt;func&lt;/code&gt; argument is&amp;nbsp;optional):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[14]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# There are 62 cases in total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[14]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
0    43.646306
1    43.680659
2    43.703547
3    43.726422
4    43.794977
Name: year, dtype: float64
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Alternatively, since columns are basically just arrays, we can use built-in numpy functions directly on the&amp;nbsp;columns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[15]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# Again, there are 62 cases in total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[15]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
0    43.646306
1    43.680659
2    43.703547
3    43.726422
4    43.794977
Name: year, dtype: float64
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="adding-a-new-variable"&gt;Adding a New&amp;nbsp;Variable&lt;/h3&gt;
&lt;p&gt;Sometimes you will compute a new quantity from the existing variables and want to treat this as a new variable. Adding a new variable to a data frame can be done similarly to &lt;em&gt;accessing&lt;/em&gt; a variable. For instance, here is how to create a new variable in &lt;code&gt;swim&lt;/code&gt; that holds the &lt;code&gt;time&lt;/code&gt; converted from seconds to units of&amp;nbsp;minutes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[16]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;minutes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;60.&lt;/span&gt; &lt;span class="c"&gt;# or swim[&amp;#39;time&amp;#39;]/60.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;By default, columns get inserted at the end. The &lt;code&gt;insert&lt;/code&gt; function is available to insert at a particular location in the&amp;nbsp;columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[17]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;60.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You could also, if you want, redeﬁne an existing variable, for&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[18]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;60.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As always, we can take a quick look at the results of our operations by using the &lt;code&gt;head()&lt;/code&gt; fuction of our data&amp;nbsp;frame:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[19]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[19]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;mins&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;minutes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt; 1905&lt;/td&gt;
      &lt;td&gt; 1.096667&lt;/td&gt;
      &lt;td&gt; 1.096667&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
      &lt;td&gt; 1.096667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt; 1908&lt;/td&gt;
      &lt;td&gt; 1.093333&lt;/td&gt;
      &lt;td&gt; 1.093333&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
      &lt;td&gt; 1.093333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt; 1910&lt;/td&gt;
      &lt;td&gt; 1.046667&lt;/td&gt;
      &lt;td&gt; 1.046667&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
      &lt;td&gt; 1.046667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt; 1912&lt;/td&gt;
      &lt;td&gt; 1.026667&lt;/td&gt;
      &lt;td&gt; 1.026667&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
      &lt;td&gt; 1.026667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt; 1918&lt;/td&gt;
      &lt;td&gt; 1.023333&lt;/td&gt;
      &lt;td&gt; 1.023333&lt;/td&gt;
      &lt;td&gt; M&lt;/td&gt;
      &lt;td&gt; 1.023333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Such assignment operations do not change the original file from which the data were read, only the data frame in the current session of Python. This is an advantage, since it means that your data in the data file stay in their original state and therefore won’t be corrupted by operations made during&amp;nbsp;analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="sampling-from-a-sample-frame"&gt;Sampling from a Sample&amp;nbsp;Frame&lt;/h2&gt;
&lt;p&gt;Much of statistical analysis is concerned with the consequences of drawing a sample from the population. Ideally, you will have a sampling frame that lists every member of the population from which the sample is to be drawn. With this in hand, you could treat the individual cases in the sampling frame as if they were cards in a deck of hands. To pick your random sample, shuffle the deck and deal out the desired number of&amp;nbsp;cards.&lt;/p&gt;
&lt;p&gt;When doing real work in the ﬁeld, you would use the randomly dealt cards to locate the real-world cases they correspond to. Sometimes in these tutorials, however, in order to let you explore the consequences of sampling, you will select a sample from an existing data set. For example, the &lt;code&gt;&amp;quot;kidsfeet.csv&amp;quot;&lt;/code&gt; data set has &lt;code&gt;n=39&lt;/code&gt; cases.&lt;/p&gt;
&lt;p&gt;&lt;span class="dataset shadow"&gt;&lt;i class="icon-flag" style="font-size: 1.5em;"&gt;&lt;/i&gt; &lt;a href="http://www.mosaic-web.org/go/datasets/kidsfeet.csv"&gt;&lt;code&gt;kidsfeet.csv&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[20]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;kids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.mosaic-web.org/go/datasets/kidsfeet.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[20]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
(39, 8)
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;There are a number of procedures to draw a random sample of 5 cases from this data frame. The preferred option however, is to randomly select a subset of case ids (in this case 5) using &lt;code&gt;np.random.choice&lt;/code&gt;, and return a subsetted data frame using the &lt;code&gt;ix[]&lt;/code&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note left shadow"&gt; The &lt;code&gt;ix[]&lt;/code&gt; property is a bit tricky to figure out at first. For more information, see &lt;a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html"&gt;the official docs&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[21]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[21]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;birthmonth&lt;/th&gt;
      &lt;th&gt;birthyear&lt;/th&gt;
      &lt;th&gt;length&lt;/th&gt;
      &lt;th&gt;width&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;biggerfoot&lt;/th&gt;
      &lt;th&gt;domhand&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;    Erica&lt;/td&gt;
      &lt;td&gt;  9&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 24.5&lt;/td&gt;
      &lt;td&gt; 9.0&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt; Caroline&lt;/td&gt;
      &lt;td&gt; 12&lt;/td&gt;
      &lt;td&gt; 87&lt;/td&gt;
      &lt;td&gt; 24.0&lt;/td&gt;
      &lt;td&gt; 8.7&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4 &lt;/th&gt;
      &lt;td&gt;     Lang&lt;/td&gt;
      &lt;td&gt;  2&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 25.1&lt;/td&gt;
      &lt;td&gt; 8.9&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32&lt;/th&gt;
      &lt;td&gt;    Leigh&lt;/td&gt;
      &lt;td&gt;  3&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 24.5&lt;/td&gt;
      &lt;td&gt; 8.6&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7 &lt;/th&gt;
      &lt;td&gt;  Caitlin&lt;/td&gt;
      &lt;td&gt;  6&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 23.0&lt;/td&gt;
      &lt;td&gt; 8.8&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note right shadow"&gt; To make things a bit more concise, you can &lt;code&gt;import np.random.choice as choice&lt;/code&gt;, which will allow you to simply use &lt;code&gt;choice()&lt;/code&gt; without including the library &lt;em&gt;and&lt;/em&gt; module when&amp;nbsp;typing. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This can also be done in a single&amp;nbsp;line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[22]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[22]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;birthmonth&lt;/th&gt;
      &lt;th&gt;birthyear&lt;/th&gt;
      &lt;th&gt;length&lt;/th&gt;
      &lt;th&gt;width&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;biggerfoot&lt;/th&gt;
      &lt;th&gt;domhand&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt; Heather&lt;/td&gt;
      &lt;td&gt; 3&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 25.5&lt;/td&gt;
      &lt;td&gt; 9.5&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4 &lt;/th&gt;
      &lt;td&gt;    Lang&lt;/td&gt;
      &lt;td&gt; 2&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 25.1&lt;/td&gt;
      &lt;td&gt; 8.9&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3 &lt;/th&gt;
      &lt;td&gt;    Josh&lt;/td&gt;
      &lt;td&gt; 1&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 25.2&lt;/td&gt;
      &lt;td&gt; 9.8&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;31&lt;/th&gt;
      &lt;td&gt; Caitlin&lt;/td&gt;
      &lt;td&gt; 7&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 22.5&lt;/td&gt;
      &lt;td&gt; 8.6&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7 &lt;/th&gt;
      &lt;td&gt; Caitlin&lt;/td&gt;
      &lt;td&gt; 6&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 23.0&lt;/td&gt;
      &lt;td&gt; 8.8&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The results returned by the above methods will never contain the same case more than once (because we told the function &lt;em&gt;not&lt;/em&gt; to sample with replacement), just as if you were dealing cards from a shuffled deck. In contrast, &amp;#8216;re-sampling with replacement&amp;#8217; replaces each case after it is dealt so that it can appear more than once in the result. You wouldn’t want to do this to select from a sampling frame, but it turns out that there are valuable statistical uses for this sort of sampling with &lt;strong&gt;replacement&lt;/strong&gt;. You’ll make use of re-sampling in Tutorial 5 (Conﬁdence&amp;nbsp;Intervals).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[23]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1237&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Set seed so results are reproducible&lt;/span&gt;
&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[23]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;

&lt;div class="output_html rendered_html"&gt;
&lt;div style="max-height:1000px;max-width:1500px;overflow:auto;"&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;birthmonth&lt;/th&gt;
      &lt;th&gt;birthyear&lt;/th&gt;
      &lt;th&gt;length&lt;/th&gt;
      &lt;th&gt;width&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;biggerfoot&lt;/th&gt;
      &lt;th&gt;domhand&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;      Ray&lt;/td&gt;
      &lt;td&gt; 3&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 24.8&lt;/td&gt;
      &lt;td&gt; 8.9&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;     Glen&lt;/td&gt;
      &lt;td&gt; 7&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 27.1&lt;/td&gt;
      &lt;td&gt; 9.4&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;36&lt;/th&gt;
      &lt;td&gt; Teshanna&lt;/td&gt;
      &lt;td&gt; 3&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 26.0&lt;/td&gt;
      &lt;td&gt; 9.0&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7 &lt;/th&gt;
      &lt;td&gt;  Caitlin&lt;/td&gt;
      &lt;td&gt; 6&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 23.0&lt;/td&gt;
      &lt;td&gt; 8.8&lt;/td&gt;
      &lt;td&gt; G&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;     Glen&lt;/td&gt;
      &lt;td&gt; 7&lt;/td&gt;
      &lt;td&gt; 88&lt;/td&gt;
      &lt;td&gt; 27.1&lt;/td&gt;
      &lt;td&gt; 9.4&lt;/td&gt;
      &lt;td&gt; B&lt;/td&gt;
      &lt;td&gt; L&lt;/td&gt;
      &lt;td&gt; R&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Notice that &amp;#8216;Glen&amp;#8217; was sampled&amp;nbsp;twice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;As with all &amp;#8216;Statistical Modeling: A Fresh Approach for Python&amp;#8217; tutorials, this tutorial is based directly on material from &lt;a href="http://www.mosaic-web.org/go/StatisticalModeling/"&gt;&amp;#8216;Statistical Modeling: A Fresh Approach (2nd Edition)&amp;#8217;&lt;/a&gt; by &lt;a href="http://www.macalester.edu/~kaplan/"&gt;Daniel Kaplan&lt;/a&gt;. This tutorial is based on Chapter 2: Data: Cases, Variables,&amp;nbsp;Samples.&lt;/p&gt;
&lt;p&gt;I have made an effort to keep the text and explanations consistent between the original (R-based) version and the Python tutorials, in order to keep things comparable. With that in mind, any errors, omissions, and/or differences between the two versions are mine, and any questions, comments, and/or concerns should be &lt;script type="text/javascript"&gt;
&lt;!--
h='&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;';a='&amp;#64;';n='&amp;#x63;&amp;#x61;&amp;#114;&amp;#x73;&amp;#x6f;&amp;#110;&amp;#46;&amp;#102;&amp;#x61;&amp;#114;&amp;#x6d;&amp;#x65;&amp;#114;';e=n+a+h;
document.write('&lt;a h'+'ref'+'="ma'+'ilto'+':'+e+'"&gt;'+'directed to me'+'&lt;\/'+'a'+'&gt;');
// --&gt;
&lt;/script&gt;&lt;noscript&gt;&amp;#100;&amp;#x69;&amp;#114;&amp;#x65;&amp;#x63;&amp;#116;&amp;#x65;&amp;#100;&amp;#32;&amp;#116;&amp;#x6f;&amp;#32;&amp;#x6d;&amp;#x65;&amp;#32;&amp;#40;&amp;#x63;&amp;#x61;&amp;#114;&amp;#x73;&amp;#x6f;&amp;#110;&amp;#46;&amp;#102;&amp;#x61;&amp;#114;&amp;#x6d;&amp;#x65;&amp;#114;&amp;#32;&amp;#x61;&amp;#116;&amp;#32;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#32;&amp;#100;&amp;#x6f;&amp;#116;&amp;#32;&amp;#x63;&amp;#x6f;&amp;#x6d;&amp;#x29;&lt;/noscript&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cfarmer</dc:creator><pubDate>Sat, 09 Nov 2013 12:00:00 -0500</pubDate><guid>tag:www.carsonfarmer.com,2013-11-09:2013/11/statistical-modeling-python-data/</guid><category>Helpful tips</category><category>Python</category><category>Statistical Modeling</category><category>Teaching</category></item><item><title>A Fresh Approach using Python: Introduction</title><link>http://www.carsonfarmer.com/2013/11/statistical-modeling-python-introduction/</link><description>&lt;p&gt;Welcome to the first in a series of tutorials on using Python for introductory 
statistical analysis. As I put more of these tutorials online, you should be 
able to access them easily by &lt;a href="http://www.carsonfarmer.com/category/statistical-modeling-for-python.html"&gt;clicking&lt;/a&gt; or searching for the relevant 
category: &amp;#8220;Statistical Modeling for&amp;nbsp;Python&amp;#8221;.&lt;/p&gt;
&lt;p&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This series of tutorials is based on the &amp;#8216;Computational Technique&amp;#8217; sections of each chapter from &lt;a href="http://www.mosaic-web.org/go/StatisticalModeling/"&gt;&amp;#8216;Statistical Modeling: A Fresh Approach (2nd Edition)&amp;#8217;&lt;/a&gt;. The goal of this series of tutorials is to show how all of the R analysis and commands used in the book can be done just as easily using the &lt;a href="http://python.org/"&gt;Python&lt;/a&gt; programming language. This has the dual goal of introducing &amp;#8216;Scientific Python&amp;#8217; to students learning statistics, as well as showcasing the recent advances in statistical computing that have been introduced to Python in recent years. Each tutorial in the series will cover the Computational Technique section of a different chapter from the book, starting with Section 1.4.3 from the introduction (which technically &lt;em&gt;isn&amp;#8217;t&lt;/em&gt; a Computational Technique section, but is a useful introduction none-the-less), which is &lt;a href="http://www.mosaic-web.org/go/StatisticalModeling/Chapters/"&gt;available online here&lt;/a&gt;. Note that many of these tutorials will require you to have read the corresponding chapter(s) from the book in order to be&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;All the tutorials assume that Python is installed and running on your computer. To use the notebooks &lt;a href="https://github.com/cfarmer/stat-mod-fresh-approach-python"&gt;associated with these tutorials&lt;/a&gt;, you&amp;#8217;ll also need to have &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; (with notebook) installed. There are plenty of resources online with information on &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt;, &lt;a href="http://ipython.org/notebook.html"&gt;Notebooks&lt;/a&gt;, and &lt;a href="http://ipython.org/install.html"&gt;installation instructions&lt;/a&gt;) for both. You&amp;#8217;ll also need to have the &lt;a href="http://www.scipy.org/"&gt;Scientific Python&lt;/a&gt; libraries installed for additional statistical functionality (we&amp;#8217;ll also introduce some &lt;a href="http://statsmodels.sourceforge.net/"&gt;other statistical libraries&lt;/a&gt; in later tutorials), and &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt; for plotting and&amp;nbsp;visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="the-ipython-command-console"&gt;The IPython Command&amp;nbsp;Console&lt;/h2&gt;
&lt;p&gt;Once you have IPython installed, you are ready to perform all sorts of statistical and other mathematical and scientific operations. However, to use the powerful range of tools, functions, commands, and statistical methods available in Python, you first need to learn a little bit about the syntax and meaning of Python commands. Once you have learned this, operations become simple to perform. Before staring this tutorial, read section 1.4 from &amp;#8216;Statistical Modeling: A Fresh Approach&amp;#8217;, which outlines some general concepts surrounding computational statistics (in the context of R). In particular, it provides some explanation of a &amp;#8216;language-based approach&amp;#8217; to statistical computing - which is an important concept throughout the book and this series of&amp;nbsp;tutorials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="invoking-an-operation"&gt;Invoking an&amp;nbsp;Operation&lt;/h2&gt;
&lt;p&gt;People often think of computers as &lt;em&gt;doing things&lt;/em&gt;: sending email, playing music, storing files. Your job in using a computer is to tell the computer &lt;em&gt;what&lt;/em&gt; to do. There are many different words used to refer to the &amp;#8220;what&amp;#8221;: a procedure, a task, a function, a routine, and so on. Like in the book, I&amp;#8217;ll use the word &lt;strong&gt;computation&lt;/strong&gt;. Admittedly, this is a bit circular, but it is easy to remember: computers perform&amp;nbsp;computations.&lt;/p&gt;
&lt;p&gt;Complex computations are built up from simpler computations. This may seem obvious, but it is a powerful idea. An &lt;strong&gt;algorithm&lt;/strong&gt; is just a description of a computation in terms of other computations that you already know how to perform. To help distinguish between the computation as a whole and the simpler parts, it is helpful to introduce a new word: an &lt;strong&gt;operator&lt;/strong&gt; performs a&amp;nbsp;computation.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s helpful to think of the computation carried out by an operator as involving four&amp;nbsp;parts:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;The name of the&amp;nbsp;operator&lt;/li&gt;
&lt;li&gt;The input&amp;nbsp;arguments&lt;/li&gt;
&lt;li&gt;The output&amp;nbsp;value&lt;/li&gt;
&lt;li&gt;Side&amp;nbsp;effects&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;A typical operation takes one or more &lt;strong&gt;input arguments&lt;/strong&gt; and uses the information in these to produce an &lt;strong&gt;output value&lt;/strong&gt;. Along the way, the computer might take some action: display a graph, store a file, make a sound, etc. These actions are called &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because R is a programing language designed specifically for statistical analysis, many of the &amp;#8216;base&amp;#8217; commands (such as &lt;code&gt;sqrt()&lt;/code&gt;) are available &amp;#8216;out-of-the-box&amp;#8217;. However, since Python is a more general-purpose programming language, we usually need to &lt;code&gt;import&lt;/code&gt; statistical commands (think of this as adding words to a language) before we can use them. For Scientific Python, the most important library that we need is &lt;code&gt;numpy&lt;/code&gt; (Numerical Python), which can be loaded like&amp;nbsp;this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[1]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note left shadow"&gt; It is best to ensure you are using the latest version of &lt;code&gt;numpy&lt;/code&gt;, which is available &lt;a href="http://scipy.org/Download"&gt;from here&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;To tell the computer to perform a computation - call this &lt;strong&gt;invoking an operation&lt;/strong&gt; or giving a &lt;strong&gt;command&lt;/strong&gt; - you need to provide the name and the input arguments in a specific format. The computer then returns the output value. For example, the command &lt;code&gt;np.sqrt(25)&lt;/code&gt; invokes the square root operator (named &lt;code&gt;sqrt&lt;/code&gt; from the &lt;code&gt;numpy&lt;/code&gt; library) on the argument &lt;code&gt;25&lt;/code&gt;. The output from the computation will, of course, we &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax of invoking an operation consists of the operator&amp;#8217;s name, followed by round parentheses. The input arguments go inside the&amp;nbsp;parentheses.&lt;/p&gt;
&lt;p&gt;The software program that you use to invoke operators is called an &lt;strong&gt;interpreter&lt;/strong&gt; (the interpreter is the program you are running when you start Python). You enter your commands as a &amp;#8216;dialog&amp;#8217; between you and the interpreter (just like when converting between any two languages!). Commands can be entered as part of a script (a text file with a list of commands to perform) or directly at a &amp;#8216;command&amp;nbsp;prompt&amp;#8217;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[2]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[2]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
5.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the above situation, the &amp;#8216;prompt&amp;#8217; is &lt;code&gt;In [ ]:&lt;/code&gt;, and the &amp;#8216;command&amp;#8217; is &lt;code&gt;np.sqrt(25)&lt;/code&gt;. When you press &amp;#8216;Enter&amp;#8217;, the interpreter reads your command and performs the computation. For commands such as the one above, the interpreter will print the output value from the&amp;nbsp;computation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[3]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[3]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
5.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the above example, the &amp;#8216;output marker&amp;#8217; is &lt;code&gt;Out[ ]:&lt;/code&gt;, and the output value is &lt;code&gt;5.0&lt;/code&gt;. The dialog continues as the interpreter prints another prompt and waits for your further&amp;nbsp;command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Often, operations involve more than one argument. The various arguments are separated by commas. For example, here is an operation named &lt;code&gt;arange&lt;/code&gt; from the &lt;code&gt;numpy&lt;/code&gt; library that produces a range of numbers (increasing values between 3 and&amp;nbsp;10):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[4]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[4]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([3, 4, 5, 6, 7, 8, 9])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The first argument tells where to start the range and the second tells where to end it. The order of the arguments is important. For instance, &lt;em&gt;here&lt;/em&gt; is the range produced when 10 is the first argument, 3 is the second, and the third is -1 (decreasing values between 10 and&amp;nbsp;3):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[5]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[5]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([10,  9,  8,  7,  6,  5,  4])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For some operators, particularly those that have many input arguments, some of the arguments can be referred to by name rather than position. This is particularly useful when the named argument has a sensible default value. For example, the &lt;code&gt;arange&lt;/code&gt; operator from the &lt;code&gt;numpy&lt;/code&gt; library can be instructed what type of output values to produce (integers, floats, etc). This is accomplished using an argument named &lt;code&gt;dtype&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[6]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[6]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([ 10.,   9.,   8.,   7.,   6.,   5.,   4.])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Note that all the values in the range now have decimal places. Depending on the circumstances, all four parts of an operation need not be present. For example, the &lt;code&gt;ctime&lt;/code&gt; operation from the &lt;code&gt;time&lt;/code&gt; library returns the current time and date; no input arguments are&amp;nbsp;required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[7]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[7]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
&amp;apos;Mon Sep 23 15:58:25 2013&amp;apos;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the above example, we first imported the &lt;code&gt;time&lt;/code&gt; library, which provides a series of commands that help us work with dates and times. Next, even though there are no arguments, the parentheses are still used when calling the &lt;code&gt;ctime&lt;/code&gt; command. Think of the pair of parentheses as meaning, &amp;#8216;&lt;em&gt;do this&lt;/em&gt;&amp;#8216;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="naming-and-storing-values"&gt;Naming and Storing&amp;nbsp;Values&lt;/h3&gt;
&lt;p&gt;Often the value returned by an operation will be used later on. Values can be stored for later use with the &lt;strong&gt;assignment operator&lt;/strong&gt;. This has a different syntax that reminds the user that a value is being stored. Here&amp;#8217;s an example of a simple&amp;nbsp;assignment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[8]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The command has stored the value 16 under the name &lt;code&gt;x&lt;/code&gt;. The syntax is always the same: an equal sign (=) with a name on the left side and a value on the right. Such stored values are called &lt;strong&gt;objects&lt;/strong&gt;. Making an assignment to an object defines the object. Once an object has been defined, it can be referred to and used in later computations. Notice that an assignment operation does not return a value or display a value. Its sole purpose is to have the side effects of defining the object and thereby storing a value under the object&amp;#8217;s&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;To refer to the value stored in the object, just use the object&amp;#8217;s name itself. For&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[9]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[9]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
16
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Doing a computation on the value store in an object is much the same (and provides and extremely rich syntax for performing complex&amp;nbsp;calculations):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[10]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[10]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
4.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You can create as many objects as you like and give them names that remind you of their purpose. Some examples: &lt;code&gt;wilma&lt;/code&gt;, &lt;code&gt;ages&lt;/code&gt;, &lt;code&gt;temp&lt;/code&gt;, &lt;code&gt;dog_houses&lt;/code&gt;, &lt;code&gt;foo3&lt;/code&gt;. There &lt;em&gt;are&lt;/em&gt; some general rules for object&amp;nbsp;names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use only letters and numbers and &amp;#8216;underscores&amp;#8217;&amp;nbsp;(_)&lt;/li&gt;
&lt;li&gt;Do &lt;span class="caps"&gt;NOT&lt;/span&gt; use spaces anywhere in the name (Python won&amp;#8217;t let&amp;nbsp;you)&lt;/li&gt;
&lt;li&gt;A number cannot be the first character in the&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;Capital letters are treated as distinct from lower-case letters (i.e., Python is &lt;em&gt;case-sensitive&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;the objects named &lt;code&gt;wilma&lt;/code&gt;, &lt;code&gt;Wilma&lt;/code&gt;, and &lt;code&gt;WILMA&lt;/code&gt; are all&amp;nbsp;different&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If possible, use an &amp;#8216;underscore&amp;#8217; between words (i.e., &lt;code&gt;my_object&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For the sake of readability, keep object names short. But if you really must have an object named something like &lt;code&gt;ages_of_children_from_the _clinical_trial&lt;/code&gt;, feel free (it&amp;#8217;s just more typing for you&amp;nbsp;later!).&lt;/p&gt;
&lt;p&gt;Objects can store all sorts of things, for example a range of&amp;nbsp;numbers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[11]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;When you assign a new value to an existing object, as just done to &lt;code&gt;x&lt;/code&gt; above, the former values of that object is erased from the computer memory. The former value of &lt;code&gt;x&lt;/code&gt; was 16, but after the new assignment above, it&amp;nbsp;is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[12]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[12]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([1, 2, 3, 4, 5, 6])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The value of an object is changed only via the assignment operator. Using an object in a computation does not change the value. For example, suppose you invoke the square-root operator on &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[13]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[13]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([ 1.        ,  1.41421356,  1.73205081,  2.        ,  2.23606798,
        2.44948974])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The square roots have been returned as a value, but this doesn&amp;#8217;t change the value of &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[14]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[14]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([1, 2, 3, 4, 5, 6])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note right shadow" markdown="1"&gt; An assignment command like &lt;code&gt;x=np.sqrt(x)&lt;/code&gt; can be confusing to people who are used to algebraic notation. In algebra, the equal sign describes a relationship between the left and right sides. So, \(x = \sqrt{x}\) tells us about how the quantity \(x\) and the quantity \(\sqrt{x}\) are related. Students are usually trained to &amp;#8216;solve&amp;#8217; such a relationship, going through a series of algebraic steps to find values for \(x\) that are consistent with the mathematical statement (for \(x = \sqrt{x}\), the solutions are \(x = 0\) and \(x = 1\)). In contrast, the assignment command &lt;code&gt;x = np.sqrt(x)&lt;/code&gt; is a way of replacing the previous values stored in &lt;code&gt;x&lt;/code&gt; with new values that are the square-root of the old&amp;nbsp;ones. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If you want to change the value of &lt;code&gt;x&lt;/code&gt;, you need to use the assignment&amp;nbsp;operator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[15]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="connecting-computations"&gt;Connecting&amp;nbsp;Computations&lt;/h3&gt;
&lt;p&gt;The brilliant thing about organizing operators in terms of unput arguments and output values is that the output of one operator can be used as an input to another. This lets complicated computations be built out of simpler&amp;nbsp;ones.&lt;/p&gt;
&lt;p&gt;For example, suppose you have a list of 10000 voters in a precinct and you want to select a random sample of 20 of them for a survey. The &lt;code&gt;np.arange&lt;/code&gt; operator can be used to generate a set of 10000 choices. The &lt;code&gt;np.random.choice&lt;/code&gt; operator can then be used to select a subset of these values at&amp;nbsp;random.&lt;/p&gt;
&lt;p&gt;One way to connect the computations is by using objects to store the intermediate&amp;nbsp;outputs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[16]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# sample _without_ replacement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[16]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([7863, 8378, 9128, 3340, 5674, 9055, 6374, 8668, 3768, 6798, 8066,
       6443, 5154, 5991, 1535, 3580, 8516, 4872, 8618, 7240])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You can also pass the output of an operator &lt;em&gt;directly&lt;/em&gt; as an argument to another operator. Here&amp;#8217;s another way to accomplish exactly the same thing as the above (note that the values will differ because we are performing a &lt;em&gt;random&lt;/em&gt;&amp;nbsp;sample):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[17]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[17]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
array([5732, 6833, 7705, 4459, 3131, 3515, 4177, 6312, 2820, 2705, 4580,
       9125, 7395, 1927,  728, 4725, 1854, 6147, 4421, 2756])
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="numbers-and-arithmetic"&gt;Numbers and&amp;nbsp;Arithmetic&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Python&lt;/code&gt; language has a concise notation for arithmetic that looks very much like the traditional&amp;nbsp;one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[18]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[18]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
9.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[19]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[19]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
12.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[20]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[20]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
2.5
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[21]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[21]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
-5.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[22]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[22]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
-3.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[23]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="c"&gt;# same as 5^2 (or 5 to the power of 2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[23]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
25.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Arithmetic operators, like any other operators, can be connected to form more complicated computations. For&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[24]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[24]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
10.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The a human reader, the command &lt;code&gt;8+4/2&lt;/code&gt; might seem ambiguous. Is it intended to be &lt;code&gt;(8+4)/2&lt;/code&gt; or &lt;code&gt;8+(4/2)&lt;/code&gt;? The computer uses unambiguous rules to interpret the expression, but it&amp;#8217;s a good idea for you to use parentheses so that you can make sure that what you &lt;em&gt;intend&lt;/em&gt; is what the computer carries&amp;nbsp;out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[25]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;8.&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[25]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
6.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Traditional mathematical notations uses superscripts and radicals to indicate exponentials and roots, e.g. \(3^2\) or \(\sqrt{3}\) or \(\sqrt[3]{8}\). This special typography doesn&amp;#8217;t work well with an ordinary keyboard, so &lt;code&gt;Python&lt;/code&gt; and most other computer languages uses a different&amp;nbsp;notation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[26]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[26]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
9.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[27]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# or 3.**0.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[27]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1.7320508075688772
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[28]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="mf"&gt;8.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[28]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
2.0
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;There is a large set of mathematical functions: exponentials, logs, trigonometric and inverse trigonometric functions, etc. Some&amp;nbsp;examples:&lt;/p&gt;
&lt;table border="0"&gt;
&lt;tr&gt;
&lt;th&gt;
Traditional
&lt;/th&gt;
&lt;th&gt;
Python
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
\(e^2\)
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;np.exp(2)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\log_{e}(100)\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.log(100)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\log_{10}(100)\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.log10(100)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\log_{2}(100)\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.log2(100)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\cos(\frac{\pi}{2})\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.cos(np.pi/2)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\sin(\frac{\pi}{2})\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.sin(np.pi/2)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\tan(\frac{\pi}{2})\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.tan(np.pi/2)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
\(\cos^{-1}(-1)\)
&lt;/td&gt;
    &lt;td&gt;
&lt;code&gt;np.acos(-1)&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Numbers can be written in &lt;strong&gt;scientific notation&lt;/strong&gt;. For example, the &amp;#8216;universal gravitational constant&amp;#8217; that describes the gravitational attraction between masses is \(6.67428 \times 10^{11}\) (with units meters-cubed per kilogram per second squared). In the computer notation, this would be written as &lt;code&gt;6.67428e-11&lt;/code&gt;. The Avogadro constant, which gives the number of atoms in a mole, is \(6.02214179 \times 10^{23}\) per mole, or &lt;code&gt;6.02214179e+23&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The computer language does not directly support the recording of units. This is unfortunate, since in the real world numbers often have units and the units matter. For example, in 1999 the Mars Climate Orbiter crashed into Mars because the design engineers specified the engine&amp;#8217;s thrust in units of pounds, while the guidance engineers thought the units were&amp;nbsp;newtons.&lt;/p&gt;
&lt;p&gt;&lt;span class="note right shadow"&gt; There are &lt;em&gt;some&lt;/em&gt; Python packages for handling units, including &lt;a href="https://pint.readthedocs.org/en/latest/"&gt;pint&lt;/a&gt;, &lt;a href="http://pythonhosted.org/quantities/"&gt;quantities&lt;/a&gt;, &lt;a href="https://pypi.python.org/pypi/units/"&gt;units&lt;/a&gt;, &lt;a href="http://docs.sympy.org/latest/modules/physics/units.html"&gt;sympy.physics.units&lt;/a&gt;, &lt;a href="http://conference.scipy.org/scipy2013/presentation_detail.php?id=174"&gt;etc&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Computer arithmetic is accurate and reliable, but it often involves very slight rounding of numbers. Ordinarily, this is not noticeable. However, it can become apparent in some calculations that produce results that are (near) zero. For example, mathematically, \(sin(\pi) = 0\), however, the computer does not duplicate the mathematical relationship&amp;nbsp;exactly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[29]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[29]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
1.2246467991473532e-16
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Whether a number like this is properly interpreted as &amp;#8216;close to zero&amp;#8217; depends on the context and, for quantities that have units, on the units themselves. For instance, the unit &amp;#8216;parsec&amp;#8217; is used in astronomy in reporting distances between stars. The closest start to the Sun is Proxima, at a distance of 1.3 parsecs. A distance of \(1.22 \times 10^{-16}\) parsecs is tiny in astronomy but translates to about 2.5 meters - not so small on the human scale. In statistics, many calculations relate to probabilities which are always in the range 0 to 1. On this scale, &lt;code&gt;1.22e-16&lt;/code&gt; is very close to&amp;nbsp;zero.&lt;/p&gt;
&lt;p&gt;There are several &amp;#8216;special&amp;#8217; numbers in the &lt;code&gt;Python&lt;/code&gt; world; two of which are &lt;code&gt;inf&lt;/code&gt;, which stands for \(\infty\) (infinity), and &lt;code&gt;nan&lt;/code&gt;, which stands for &amp;#8216;not a number&amp;#8217; (nan results when a numerical operation isn&amp;#8217;t define), for&amp;nbsp;instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note right shadow"&gt; Mathematically oriented readers will wonder why &lt;code&gt;Python&lt;/code&gt; should have any trouble with a computation like \(\sqrt{-9}\); the result is the imaginary number \(3\jmath\) (imaginary numbers may be represented by a \(\jmath\) or a \(\imath\), depending on the field). &lt;code&gt;Python&lt;/code&gt; works with complex numbers, but you have to explicitly tell the system that this is what you want to do. To calculate \(\sqrt{-9}\) for example, simply use &lt;code&gt;np.sqrt(-9+0j)&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[30]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stderr"&gt;
&lt;pre&gt;
-c:1: RuntimeWarning: divide by zero encountered in double_scalars

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[30]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
inf
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[31]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stderr"&gt;
&lt;pre&gt;
-c:1: RuntimeWarning: invalid value encountered in double_scalars

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[31]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
nan
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="types-of-objects"&gt;Types of&amp;nbsp;Objects&lt;/h3&gt;
&lt;p&gt;Most of the examples used so far have dealt with numbers. But computers work with other kinds of information as well: text, photographs, sounds, sets of data, and so on. The word &lt;strong&gt;type&lt;/strong&gt; is used to refer to the &lt;em&gt;kind&lt;/em&gt; of information. Modern computer languages support a great variety of types. It&amp;#8217;s important to know about the types of data because operators expect their input arguments to be of specific types. When you use the wrong type of input, the computer might not be able to process your&amp;nbsp;command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;span class="note left shadow"&gt; In Python, data frames are not &amp;#8216;built in&amp;#8217; as part of the basic language, but the excellent &lt;a href="http://pandas.pydata.org/"&gt;&amp;#8216;pandas&amp;#8217;&lt;/a&gt; library provides data frames and a whole slew of other functionality to researchers doing data analysis with Python. We will be learning more about &amp;#8216;pandas&amp;#8217; in future&amp;nbsp;tutorials. &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;For the purposes of starting computational statistics with Python, it&amp;#8217;s important to distinguish among three basic&amp;nbsp;types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;numeric&lt;/strong&gt; positive and negative numbers, decimal and fractional numbers (&lt;code&gt;floats&lt;/code&gt;), and whole numbers (&lt;code&gt;integers&lt;/code&gt;) - numbers of the sort encountered so&amp;nbsp;far&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data frames&lt;/strong&gt; collections of data (more or less) in the form of a spreadsheet table - the &amp;#8216;Computational Technique&amp;#8217; section from chapter 2 will introduce data frames and the operators and libraries for working with data&amp;nbsp;frames&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; textual data - you indicate string data to the computer by enclosing the text in quotation marks (e.g., &lt;code&gt;name = &amp;quot;python&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="a-note-on-strings"&gt;A Note on&amp;nbsp;Strings&lt;/h4&gt;
&lt;p&gt;There is something a bit subtle going on in the previous command involving the string &lt;code&gt;&amp;quot;python&amp;quot;&lt;/code&gt;, so look at it carefully. The purpose of the command is to create a new object, called &lt;code&gt;name&lt;/code&gt;, which stores a little bit of text data. Notice that the name of the object is not put in quotes, but the text characters&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;Whenever you refer to an object name, make sure that you don&amp;#8217;t use quotes. For example, in the following, we are first assigning the string &lt;code&gt;&amp;quot;python&amp;quot;&lt;/code&gt; to the &lt;code&gt;name&lt;/code&gt; object, and then returning (and printing automatically) the &lt;code&gt;name&lt;/code&gt; object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[32]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[32]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
&amp;apos;python&amp;apos;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If you make a command with the object name in quotes, it won&amp;#8217;t be treated as referring to an object. Instead, it will merely mean the text&amp;nbsp;itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[33]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;
    Out[33]:&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyout"&gt;


&lt;pre&gt;
&amp;apos;name&amp;apos;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Similarly, if you omit the quotation marks from around the text, the computer will treat it as if it were an object name and will look for the object of that name. For instance, the following command directs the computer to look up the value contained in an object named &lt;code&gt;python&lt;/code&gt; and insert that value into the object &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;
In&amp;nbsp;[34]:
&lt;/div&gt;
&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight-ipynb"&gt;&lt;pre class="ipynb"&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_pyerr"&gt;
&lt;pre&gt;
&lt;span class="ansired"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansired"&gt;NameError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class="ansigreen"&gt;&amp;lt;ipython-input-34-43a69bc65ba8&amp;gt;&lt;/span&gt; in &lt;span class="ansicyan"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="ansiblue"&gt;()&lt;/span&gt;
&lt;span class="ansigreen"&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class="ansiyellow"&gt; &lt;/span&gt;name &lt;span class="ansiyellow"&gt;=&lt;/span&gt; python&lt;span class="ansiyellow"&gt;&lt;/span&gt;

&lt;span class="ansired"&gt;NameError&lt;/span&gt;: name &amp;apos;python&amp;apos; is not defined&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As it happens, there was no object named &lt;code&gt;python&lt;/code&gt; because it had not been defined by any previous assignment command. So, the computer generated an error. For the most part, you will not need to use vary many operators on text data when doing statistical analyses; you just need to remember to include text, such as file names, in quotation marks, &lt;code&gt;&amp;quot;like this&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="reference"&gt;Reference&lt;/h3&gt;
&lt;p&gt;As with all &amp;#8216;Statistical Modeling: A Fresh Approach for Python&amp;#8217; tutorials, this tutorial is based directly on material from &lt;a href="http://www.mosaic-web.org/go/StatisticalModeling/"&gt;&amp;#8216;Statistical Modeling: A Fresh Approach (2nd Edition)&amp;#8217;&lt;/a&gt; by &lt;a href="http://www.macalester.edu/~kaplan/"&gt;Daniel Kaplan&lt;/a&gt;. This tutorial is based on Chapter 1:&amp;nbsp;Introduction.&lt;/p&gt;
&lt;p&gt;Another useful source of information for statistics in Python is this &lt;a href="http://work.thaslwanter.at/Stats/html/"&gt;introduction to statistics&lt;/a&gt; web-book by Thomas Haslwanter which is licensed under a Creative Commons Attribution-NonCommercial 3.0 Unported&amp;nbsp;License.&lt;/p&gt;
&lt;p&gt;I have made an effort to keep the text and explanations consistent between the original (R-based) version and the Python tutorials, in order to keep things comparable. With that in mind, any errors, omissions, and/or differences between the two versions are mine, and any questions, comments, and/or concerns should be &lt;script type="text/javascript"&gt;
&lt;!--
h='&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;';a='&amp;#64;';n='&amp;#x63;&amp;#x61;&amp;#114;&amp;#x73;&amp;#x6f;&amp;#110;&amp;#46;&amp;#102;&amp;#x61;&amp;#114;&amp;#x6d;&amp;#x65;&amp;#114;';e=n+a+h;
document.write('&lt;a h'+'ref'+'="ma'+'ilto'+':'+e+'"&gt;'+'directed to me'+'&lt;\/'+'a'+'&gt;');
// --&gt;
&lt;/script&gt;&lt;noscript&gt;&amp;#100;&amp;#x69;&amp;#114;&amp;#x65;&amp;#x63;&amp;#116;&amp;#x65;&amp;#100;&amp;#32;&amp;#116;&amp;#x6f;&amp;#32;&amp;#x6d;&amp;#x65;&amp;#32;&amp;#40;&amp;#x63;&amp;#x61;&amp;#114;&amp;#x73;&amp;#x6f;&amp;#110;&amp;#46;&amp;#102;&amp;#x61;&amp;#114;&amp;#x6d;&amp;#x65;&amp;#114;&amp;#32;&amp;#x61;&amp;#116;&amp;#32;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#32;&amp;#100;&amp;#x6f;&amp;#116;&amp;#32;&amp;#x63;&amp;#x6f;&amp;#x6d;&amp;#x29;&lt;/noscript&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cfarmer</dc:creator><pubDate>Fri, 01 Nov 2013 12:00:00 -0400</pubDate><guid>tag:www.carsonfarmer.com,2013-11-01:2013/11/statistical-modeling-python-introduction/</guid><category>Helpful tips</category><category>Python</category><category>Statistical Modeling</category><category>Teaching</category></item></channel></rss>